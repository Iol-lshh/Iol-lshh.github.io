{"version":3,"file":"component---src-pages-index-js-b7095044bf82293a9b6a.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/article/articlePagination.js","webpack://gatsby-starter-blog/./src/components/article/articleList.js","webpack://gatsby-starter-blog/./src/components/button/scroll/scrollButtonStyle.js","webpack://gatsby-starter-blog/./src/components/button/scroll/scrollToBottomButton.js","webpack://gatsby-starter-blog/./src/components/button/scroll/scrollToTopButton.js","webpack://gatsby-starter-blog/./src/components/button/scroll/updownScrollButtonContainer.js","webpack://gatsby-starter-blog/./src/components/search/search.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport './articlePagination.css' // CSS 파일을 임포트\n\nconst ArticlePagination = ({ posts, postsPerPage, setCurrentPosts }) => {\n  const [currentPage, setCurrentPage] = useState(1)\n  const totalPages = Math.ceil(posts.length / postsPerPage)\n\n  useEffect(() => {\n    const indexOfLastPost = currentPage * postsPerPage\n    const indexOfFirstPost = indexOfLastPost - postsPerPage\n    setCurrentPosts(posts.slice(indexOfFirstPost, indexOfLastPost))\n  }, [currentPage, posts, postsPerPage, setCurrentPosts])\n\n  useEffect(() => {\n    setCurrentPage(1)\n  }, [posts])\n\n  return (\n    <div className=\"pagination\">\n      {Array.from({ length: totalPages }, (_, i) => (\n        <button\n          key={i + 1}\n          onClick={() => setCurrentPage(i + 1)}\n          disabled={currentPage === i + 1}\n          className=\"pagination-button\"\n        >\n          {i + 1}\n        </button>\n      ))}\n    </div>\n  )\n}\n\nArticlePagination.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        excerpt: PropTypes.string,\n        fields: PropTypes.shape({\n          slug: PropTypes.string,\n        }),\n        frontmatter: PropTypes.shape({\n          date: PropTypes.string,\n          title: PropTypes.string,\n          category: PropTypes.arrayOf(PropTypes.string),\n          description: PropTypes.string,\n        }),\n      }),\n    })\n  ).isRequired,\n  postsPerPage: PropTypes.number.isRequired,\n  setCurrentPosts: PropTypes.func.isRequired,\n}\n\nexport default ArticlePagination","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport ArticlePagination from './articlePagination' // ArticlePagination 컴포넌트 임포트\n\nconst ArticleList = ({ posts }) => {\n  const [currentPosts, setCurrentPosts] = useState([])\n  const postsPerPage = 10\n\n  useEffect(() => {\n    setCurrentPosts(posts.slice(0, postsPerPage))\n  }, [posts, postsPerPage])\n\n  return (\n    <>\n      <div style={{\n        minHeight: '100vh',\n      }}>\n        <ol style={{ \n          listStyle: `none`,\n          margin: 0, \n          padding: 0,\n          width: '100%',\n          boxSizing: 'border-box'\n        }}>\n          {currentPosts.map(({ node }) => {\n            const title = node.frontmatter.title || node.fields.slug\n            const postCategory = node.frontmatter.category || []\n\n            return (\n              <li key={node.fields.slug} style={{ \n                height: 'auto', \n                minHeight: '110px',\n                marginBottom: '1.5rem',\n                position: 'relative'\n              }}>\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    height: '100%',\n                    border: '1px solid #eee',\n                    borderRadius: '8px',\n                    padding: '1rem',\n                    transition: 'transform 0.2s ease-in-out',\n                  }}\n                >\n                  <header>\n                    <small>{postCategory.join(', ')}</small>\n                    <h2>\n                      <Link to={node.fields.slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">{title}</span>\n                      </Link>\n                    </h2>\n                    <small>{node.frontmatter.date}</small>\n                  </header>\n                  <section>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: node.frontmatter.description || node.excerpt,\n                      }}\n                      itemProp=\"description\"\n                    />\n                  </section>\n                </article>\n              </li>\n            )\n          })}\n        </ol>\n      </div>\n      <ArticlePagination\n        posts={posts}\n        postsPerPage={postsPerPage}\n        setCurrentPosts={setCurrentPosts}\n      />\n    </>\n  )\n}\n\nArticleList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        excerpt: PropTypes.string,\n        fields: PropTypes.shape({\n          slug: PropTypes.string,\n        }),\n        frontmatter: PropTypes.shape({\n          date: PropTypes.string,\n          title: PropTypes.string,\n          category: PropTypes.arrayOf(PropTypes.string),\n          description: PropTypes.string,\n        }),\n      }),\n    })\n  ).isRequired,\n}\n\nexport default ArticleList","const scrollButtonStyle = {\n  height: '40px',\n  padding: '10px 20px',\n  fontSize: '16px',\n  backgroundColor: '#cccccc',\n  color: '#fff',\n  border: 'none',\n  borderRadius: '5px',\n  cursor: 'pointer',\n  textAlign: 'center',\n  textDecoration: 'none',\n};\n\nexport default scrollButtonStyle;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport defaultScrollButtonStyle from './scrollButtonStyle';\n\nconst ScrollToBottomButton = ({ style }) => {\n  const [showButton, setShowButton] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY < document.documentElement.scrollHeight - window.innerHeight - 300) {\n        setShowButton(true);\n      } else {\n        setShowButton(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  const scrollToBottom = () => {\n    window.scrollTo({ top: document.documentElement.scrollHeight, behavior: 'smooth' });\n  };\n\n  return (\n    showButton && (\n        <button onClick={scrollToBottom} style={style}>\n            ↓\n        </button>\n    )\n  );\n};\n\nScrollToBottomButton.propTypes = {\n  style: PropTypes.object,\n};\n\nScrollToBottomButton.defaultProps = {\n  style: defaultScrollButtonStyle,\n};\n\nexport default ScrollToBottomButton;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport defaultScrollButtonStyle from './scrollButtonStyle';\n\n\nconst ScrollToTopButton = ({style}) => {\n  const [showButton, setShowButton] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY > 300) {\n        setShowButton(true);\n      } else {\n        setShowButton(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  return (\n    showButton && (\n        <button onClick={scrollToTop} style={style}>\n            ↑\n        </button>\n    )\n  );\n};\n\nScrollToTopButton.propTypes = {\n  style: PropTypes.object,\n};\n\nScrollToTopButton.defaultProps = {\n  style: defaultScrollButtonStyle,\n};\n\nexport default ScrollToTopButton;\n","import React from 'react';\nimport scrollButtonStyle from './scrollButtonStyle';\nimport ScrollToTopButton from './scrollToTopButton';\nimport ScrollToBottomButton from './scrollToBottomButton';\n\n\nconst UpdownScrollButtonContainer = () => {\n  return (\n    <div style={scrollButtonsContainerStyle}>\n      <ScrollToTopButton style={scrollButtonStyle} />\n      <ScrollToBottomButton style={scrollButtonStyle} />\n    </div>\n  );\n};\n\nconst scrollButtonsContainerStyle = {\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'center',\n  position: 'fixed',\n  bottom: '20px',\n  right: '20px',\n};\n\nexport default UpdownScrollButtonContainer;\n","import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport \"./search.css\"; // search.css 파일 임포트\n\nconst Search = ({ onSearch, category }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              date(formatString: \"MMMM DD, YYYY\")\n              category\n              description\n            }\n            fields {\n              slug\n            }\n            excerpt\n          }\n        }\n      }\n    }\n  `);\n\n  const [query, setQuery] = useState(\"\");\n  const posts = data.allMarkdownRemark.edges;\n\n  const handleSearch = () => {\n    const filteredPosts = posts.filter(({ node }) => {\n      const matchesTitle = node.frontmatter.title.toLowerCase().includes(query.toLowerCase());\n      const matchesCategory = category ? node.frontmatter.category.includes(category) : true;\n      return matchesTitle && matchesCategory;\n    });\n    onSearch(filteredPosts);\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  return (\n    <div className=\"search-container\">\n      <input\n        type=\"text\"\n        placeholder=\"검색어를 입력하세요...\"\n        value={query}\n        onChange={e => setQuery(e.target.value)}\n        onKeyDown={handleKeyPress} // 엔터 키 이벤트 핸들러 추가\n      />\n      <button onClick={handleSearch}>검색</button>\n    </div>\n  );\n};\n\nSearch.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n  category: PropTypes.string,\n};\n\nexport default Search;","import React, { useState } from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout/layout\"\nimport Seo from \"../components/seo\"\nimport ScrollButtonContainer from \"../components/button/scroll/updownScrollButtonContainer\"\nimport ArticleList from \"../components/article/articleList\"\nimport Search from \"../components/search/search\"\nimport PropTypes from \"prop-types\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `The Engineer, Aiming Fine.`\n  const posts = data.allMarkdownRemark.edges\n  const [filteredPosts, setFilteredPosts] = useState(posts)\n\n  const handleSearch = (filtered) => {\n    setFilteredPosts(filtered)\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Search onSearch={handleSearch} />\n      </div>\n      <ArticleList posts={filteredPosts} />\n      <ScrollButtonContainer />\n    </Layout>\n  )\n}\n\nBlogIndex.propTypes = {\n  data: PropTypes.shape({\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string,\n      }),\n    }),\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            excerpt: PropTypes.string,\n            fields: PropTypes.shape({\n              slug: PropTypes.string,\n            }),\n            frontmatter: PropTypes.shape({\n              date: PropTypes.string,\n              title: PropTypes.string,\n              category: PropTypes.arrayOf(PropTypes.string),\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n  }).isRequired,\n  location: PropTypes.object.isRequired,\n}\n\nexport default BlogIndex\n\nexport const Head = ({ location }) => (\n  <Seo \n    title=\"All posts\" \n    description=\"The Engineer, Aiming Fine - 개발과 엔지니어링에 관한 Iol-lshh의 블로그입니다.\"\n    location={location} \n  />\n)\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            category\n            description\n          }\n        }\n      }\n    }\n  }\n`"],"names":["posts","postsPerPage","setCurrentPosts","currentPage","setCurrentPage","useState","totalPages","Math","ceil","length","useEffect","indexOfLastPost","indexOfFirstPost","slice","className","Array","from","_","i","key","onClick","disabled","currentPosts","style","minHeight","listStyle","margin","padding","width","boxSizing","map","node","title","frontmatter","fields","slug","postCategory","category","height","marginBottom","position","itemScope","itemType","display","flexDirection","border","borderRadius","transition","join","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","fontSize","backgroundColor","color","cursor","textAlign","textDecoration","ScrollToBottomButton","showButton","setShowButton","handleScroll","window","scrollY","document","documentElement","scrollHeight","innerHeight","addEventListener","removeEventListener","scrollTo","top","behavior","defaultProps","defaultScrollButtonStyle","ScrollToTopButton","scrollButtonsContainerStyle","alignItems","bottom","right","scrollButtonStyle","onSearch","data","useStaticQuery","query","setQuery","allMarkdownRemark","edges","handleSearch","filteredPosts","filter","matchesTitle","toLowerCase","includes","matchesCategory","type","placeholder","value","onChange","e","target","onKeyDown","event","location","siteTitle","site","siteMetadata","setFilteredPosts","justifyContent","filtered","Head"],"sourceRoot":""}