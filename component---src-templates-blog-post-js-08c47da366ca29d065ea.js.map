{"version":3,"file":"component---src-templates-blog-post-js-08c47da366ca29d065ea.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/button/buttonStyle.js","webpack://gatsby-starter-blog/./src/components/button/redirectButton.js","webpack://gatsby-starter-blog/./src/components/button/homeButton.js","webpack://gatsby-starter-blog/./src/components/button/scroll/allScrollButtonContainer.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["const buttonStyle = {\n  padding: '10px 20px',\n  fontSize: '16px',\n  backgroundColor: '#007bff',\n  color: '#fff',\n  border: 'none',\n  borderRadius: '5px',\n  textDecoration: 'none',\n  textAlign: 'center',\n  cursor: 'pointer',\n};\n\nexport default buttonStyle;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport defaultButtonStyle from './buttonStyle';\n\nconst RedirectButton = ({ style, url, contents}) => {\n  return (\n    <Link to={url} style={style} rel=\"prev\">\n      {contents}\n    </Link>\n  );\n};\n\nRedirectButton.propTypes = {\n  style: PropTypes.object,\n  url: PropTypes.string,\n  contents: PropTypes.string,\n};\n\nRedirectButton.defaultProps = {\n  style: defaultButtonStyle,\n};\n\nexport default RedirectButton;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport buttonStyle from './buttonStyle';\nimport RedirectButton from './redirectButton';\n\n\n\nconst HomeButton = ({ style }) => {\n  return (\n    <RedirectButton style={style} url=\"/\" contents=\"üè†\" />\n  );\n};\n\nHomeButton.propTypes = {\n  style: PropTypes.object,\n};\n\nHomeButton.defaultProps = {\n  style: buttonStyle,\n};\n\nexport default HomeButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport scrollButtonStyle from './scrollButtonStyle';\nimport ScrollToTopButton from './scrollToTopButton';\nimport ScrollToBottomButton from './scrollToBottomButton';\nimport HomeButtons from '../homeButton';\nimport RedirectButton from '../redirectButton';\n\nconst AllScrollButtonContainer = ({ previousLink, nextLink }) => {\n  return (\n    <div style={scrollButtonsContainerStyle}>\n      {previousLink && <RedirectButton style={scrollButtonStyle} url={previousLink} contents={\"‚Üê\"}/>}\n      <ScrollToTopButton style={scrollButtonStyle} />\n      <HomeButtons style={scrollButtonStyle} />\n      <ScrollToBottomButton style={scrollButtonStyle} />\n      {nextLink && <RedirectButton style={scrollButtonStyle} url={nextLink} contents={\"‚Üí\"}/>}\n    </div>\n  );\n};\n\nconst scrollButtonsContainerStyle = {\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'center',\n  position: 'fixed',\n  bottom: '20px',\n  right: '20px',\n};\n\nAllScrollButtonContainer.propTypes = {\n  previousLink: PropTypes.string,\n  nextLink: PropTypes.string,\n};\n\nexport default AllScrollButtonContainer;\n","import * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport ScrollButtonContainer from \"../components/button/scroll/allScrollButtonContainer\"\n\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n  const postCategory = post.frontmatter?.category || ``\n  const postTitle = post.frontmatter.title\n\n  const previousCategory = previous?.frontmatter.category ? previous.frontmatter.category + ` > ` : ``\n  const previousTotalTitle = previous?.frontmatter.title ? previousCategory + previous.frontmatter.title : ``\n\n  const nextCategory = next?.frontmatter.category ? next.frontmatter.category + ` > ` : ``\n  const nextTotalTitle = next?.frontmatter.title ? nextCategory + next.frontmatter.title : ``\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <p>{postCategory}</p>\n          <h1 itemProp=\"headline\">{postTitle}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ‚Üê {previousTotalTitle}\n              </Link>\n            )}\n          </li>\n          <li>\n            <Link to=\"/\">Î™©Î°ùÏúºÎ°ú</Link>\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {nextTotalTitle} ‚Üí\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n      <ScrollButtonContainer previousLink={previous?.fields.slug} nextLink={next?.fields.slug}/>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\nBlogPostTemplate.propTypes = {\n  data: PropTypes.shape({\n    previous: PropTypes.shape({\n      fields: PropTypes.shape({\n        slug: PropTypes.string,\n      }),\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        category: PropTypes.string,\n      }),\n    }),\n    next: PropTypes.shape({\n      fields: PropTypes.shape({\n        slug: PropTypes.string,\n      }),\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        category: PropTypes.string,\n      }),\n    }),\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string,\n      }),\n    }),\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        date: PropTypes.string,\n        category: PropTypes.string,\n        description: PropTypes.string,\n      }),\n      html: PropTypes.string,\n    }),\n  }).isRequired,\n  location: PropTypes.object.isRequired,\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        category\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        category\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        category\n      }\n    }\n  }\n`\n"],"names":["padding","fontSize","backgroundColor","color","border","borderRadius","textDecoration","textAlign","cursor","RedirectButton","style","url","contents","Link","to","rel","defaultProps","defaultButtonStyle","HomeButton","buttonStyle","scrollButtonsContainerStyle","display","flexDirection","alignItems","position","bottom","right","previousLink","nextLink","scrollButtonStyle","Head","data","markdownRemark","post","title","frontmatter","description","excerpt","previous","next","site","location","siteTitle","siteMetadata","postCategory","category","postTitle","previousCategory","previousTotalTitle","nextCategory","nextTotalTitle","className","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","fields","slug"],"sourceRoot":""}