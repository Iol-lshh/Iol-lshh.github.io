{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/Javascript_문법/","result":{"data":{"site":{"siteMetadata":{"title":"Iol-lshh's"}},"markdownRemark":{"id":"684da5d5-a914-572f-a497-6a8f62e31a9b","excerpt":"1. 변수 1.1 const와 let 1.1.1 const 1.1.2 let 1.2 호이스팅 2. 불변성 2.1 배열 2.1.1 filter 2.1.2 map 2.1.3 reduce 2.1.4 전개연산자 (...) 3. Null 유효성 관리 3.1 논리OR(||) VS…","html":"<ul>\n<li><a href=\"#1-%EB%B3%80%EC%88%98\">1. 변수</a>\n<ul>\n<li><a href=\"#11-const%EC%99%80-let\">1.1 const와 let</a>\n<ul>\n<li><a href=\"#111-const\">1.1.1 const</a></li>\n<li><a href=\"#112-let\">1.1.2 let</a></li>\n</ul>\n</li>\n<li><a href=\"#12-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\">1.2 호이스팅</a></li>\n</ul>\n</li>\n<li><a href=\"#2-%EB%B6%88%EB%B3%80%EC%84%B1\">2. 불변성</a>\n<ul>\n<li><a href=\"#21-%EB%B0%B0%EC%97%B4\">2.1 배열</a>\n<ul>\n<li><a href=\"#211-filter\">2.1.1 filter</a></li>\n<li><a href=\"#212-map\">2.1.2 map</a></li>\n<li><a href=\"#213-reduce\">2.1.3 reduce</a></li>\n<li><a href=\"#214-%EC%A0%84%EA%B0%9C%EC%97%B0%EC%82%B0%EC%9E%90\">2.1.4 전개연산자 (...)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#3-null-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B4%80%EB%A6%AC\">3. Null 유효성 관리</a>\n<ul>\n<li><a href=\"#31-%EB%85%BC%EB%A6%ACor-vs-%EB%84%90%EB%B3%91%ED%95%A9%EC%97%B0%EC%82%B0%EC%9E%90\">3.1 논리OR(||) VS 널병합연산자(??)</a></li>\n<li><a href=\"#32-%EC%98%B5%EC%85%94%EB%84%90-%EC%B2%B4%EC%9D%B4%EB%8B%9D\">3.2 옵셔널 체이닝(.?)</a></li>\n</ul>\n</li>\n<li><a href=\"#4-%EA%B0%9D%EC%B2%B4\">4. 객체</a>\n<ul>\n<li><a href=\"#41-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\">4.1 프로퍼티</a>\n<ul>\n<li><a href=\"#411-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%B6%95%EC%95%BD-%ED%91%9C%ED%98%84\">4.1.1 프로퍼티 축약 표현</a></li>\n<li><a href=\"#412-%EA%B3%84%EC%82%B0%EB%90%9C-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EC%9D%B4%EB%A6%84\">4.1.2 계산된 프로퍼티 이름</a></li>\n</ul>\n</li>\n<li><a href=\"#42-%EB%A9%94%EC%84%9C%EB%93%9C\">4.2 메서드</a>\n<ul>\n<li><a href=\"#421-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%B6%95%EC%95%BD-%ED%91%9C%ED%98%84\">4.2.1 메서드 축약 표현</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#5-%ED%95%A8%EC%88%98\">5. 함수</a>\n<ul>\n<li><a href=\"#51-this\">5.1 this</a>\n<ul>\n<li><a href=\"#511-%EC%9D%BC%EB%B0%98-function\">5.1.1 일반 function</a></li>\n<li><a href=\"#512-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98\">5.1.2 화살표 함수</a></li>\n<li><a href=\"#513-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98new%EC%97%90-%EC%9D%98%ED%95%9C-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%9D%98-function\">5.1.3 생성자 함수(new)에 의한 인스턴스의 function</a></li>\n</ul>\n</li>\n<li><a href=\"#52-%ED%95%A8%EC%88%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-%EB%B0%A9%EC%A7%80\">5.2 함수 호이스팅 방지</a></li>\n<li><a href=\"#53-%EC%B1%85%EC%9E%84-%EB%B6%84%EB%A6%AC\">5.3 책임 분리</a>\n<ul>\n<li><a href=\"#531-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%98%B8%EC%B6%9C-%ED%95%A8%EC%88%98\">5.3.1 데이터 호출 함수</a></li>\n<li><a href=\"#532-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EB%A1%9C%EC%A7%81-%ED%95%A8%EC%88%98\">5.3.2 비즈니스 로직 함수</a></li>\n<li><a href=\"#533-%ED%94%84%EB%A0%88%EC%A0%A0%ED%85%8C%EC%9D%B4%EC%85%98-%EB%A1%9C%EC%A7%81-%ED%95%A8%EC%88%98\">5.3.3 프레젠테이션 로직 함수</a></li>\n</ul>\n</li>\n<li><a href=\"#54-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98\">5.4 매개변수</a>\n<ul>\n<li><a href=\"#541-default-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98\">5.4.1 default 매개변수</a></li>\n<li><a href=\"#542-%EA%B5%AC%EC%A1%B0%EB%B6%84%ED%95%B4-%ED%95%A0%EB%8B%B9\">5.4.2 구조분해 할당</a></li>\n<li><a href=\"#543-%EB%82%98%EB%A8%B8%EC%A7%80-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98\">5.4.3 나머지 매개변수 (...)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#6-%EB%B9%84%EB%8F%99%EA%B8%B0\">6. 비동기</a>\n<ul>\n<li><a href=\"#61-%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4-%EC%B2%98%EB%A6%AC-%EC%B2%B4%EC%9D%B4%EB%8B%9D-%ED%95%A8%EC%88%98-then\">6.1 프로미스 처리: 체이닝 함수 then</a></li>\n<li><a href=\"#62-async-await\">6.2 async await</a></li>\n<li><a href=\"#63-%EC%A4%91%EC%B2%A9%EB%90%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC\">6.3 중첩된 비동기 처리</a>\n<ul>\n<li><a href=\"#631-for--of--%EC%88%9C%EC%84%9C%EB%8C%80%EB%A1%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC\">6.3.1 for ... of ... 순서대로 비동기 처리</a></li>\n<li><a href=\"#632-reduce-%ED%95%A8%EC%88%98\">6.3.2 reduce 함수</a></li>\n<li><a href=\"#633-promiseall--%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%B2%98%EB%A6%AC\">6.3.3 Promise.all( ) 비동기 처리</a></li>\n</ul>\n</li>\n<li><a href=\"#64-%EC%93%B0%EB%A1%9C%ED%8B%80%EB%A7%81%EA%B3%BC-%EB%94%94%EB%B0%94%EC%9A%B4%EC%8A%A4-%EC%B2%98%EB%A6%AC\">6.4 쓰로틀링과 디바운스 처리</a>\n<ul>\n<li><a href=\"#641-%EB%94%94%EB%B0%94%EC%9A%B4%EC%8A%A4debouncing\">6.4.1 디바운스(Debouncing)</a></li>\n<li><a href=\"#642-%EC%93%B0%EB%A1%9C%ED%8B%80%EB%A7%81throttling\">6.4.2 쓰로틀링(Throttling)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>1. 변수</h2>\n<ul>\n<li>자바스크립트는 동적 타입</li>\n<li>Call By Sharing</li>\n</ul>\n<h3>1.1 const와 let</h3>\n<h4>1.1.1 const</h4>\n<ul>\n<li>변수는 기본적으로 <code class=\"language-text\">const</code>로 정의한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> foo<span class=\"token punctuation\">;</span></code></pre></div>\n<h4>1.1.2 let</h4>\n<ul>\n<li>반복의 인자로써 변수는 <code class=\"language-text\">let</code>로 정의한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fooArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> idx <span class=\"token keyword\">in</span> fooArr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fooArr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>1.2 호이스팅</h3>\n<ul>\n<li>변수(함수 포함)의 호이스팅에 주의하여 작성한다.</li>\n<li>변수들의 선언을, 사용되는 로직과 가까이하여, 쉐도잉을 방지한다.</li>\n<li><code class=\"language-text\">var</code> 사용을 지양한다.</li>\n<li>함수 선언시, <code class=\"language-text\">const</code>로 정의한 변수에 할당시켜 사용한다.</li>\n</ul>\n<hr>\n<h2>2. 불변성</h2>\n<ul>\n<li>모든 객체는 불변성 유지를 지향한다.</li>\n<li>원본 데이터의 객체는, 다시 새 데이터를 입력받아서만 수정한다.\n<ul>\n<li><a href=\"./doc_Vue_Style_Guide.md/#54-axios\">5.4 axios 사용하기 참조</a></li>\n</ul>\n</li>\n</ul>\n<h3>2.1 배열</h3>\n<ul>\n<li>속성 배열의 값이 바뀌었을때, deep copy를 통한 재할당을 지향한다.</li>\n<li>filter, map, reduce 함수 사용을 지향한다.</li>\n<li>전개연산자 <code class=\"language-text\">...</code> 사용을 지향한다.</li>\n</ul>\n<h4>2.1.1 filter</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fooArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> evenArr <span class=\"token operator\">=</span> fooArr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> e <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>2.1.2 map</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fooArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> doubleArr <span class=\"token operator\">=</span> fooArr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> e <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>2.1.3 reduce</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fooArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> fooArr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> acc <span class=\"token operator\">+</span> e<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>2.1.4 전개연산자 (<code class=\"language-text\">...</code>)</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">barArr</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// put 5</span>\nfoo<span class=\"token punctuation\">.</span>barArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>foo<span class=\"token punctuation\">.</span>barArr<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// pop 5</span>\nfoo<span class=\"token punctuation\">.</span>barArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>foo<span class=\"token punctuation\">.</span>barArr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h2>3. Null 유효성 관리</h2>\n<ul>\n<li>null과 undefined 관리를 지향한다.</li>\n<li>논리OR(<code class=\"language-text\">||</code>) 와 널병합연산자(<code class=\"language-text\">??</code>)를 적절한 곳에 사용한다.</li>\n<li>옵셔널 체이닝(<code class=\"language-text\">.?</code>) 활용을 지향한다.</li>\n</ul>\n<h3>3.1 논리OR(<code class=\"language-text\">||</code>) VS 널병합연산자(<code class=\"language-text\">??</code>)</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 빈 문자열 할당 (논리 평가시 false)</span>\n<span class=\"token keyword\">let</span> myText <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// # 논리OR</span>\n<span class=\"token keyword\">let</span> notFalsyText <span class=\"token operator\">=</span> myText <span class=\"token operator\">||</span> <span class=\"token string\">'Hello world'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notFalsyText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello world</span>\n\n<span class=\"token comment\">// # 널병합연산자</span>\n<span class=\"token keyword\">let</span> preservingFalsy <span class=\"token operator\">=</span> myText <span class=\"token operator\">??</span> <span class=\"token string\">'Hi neighborhood'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>preservingFalsy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '' -> undefined나 null이 아니므로!</span></code></pre></div>\n<h3>3.2 옵셔널 체이닝(<code class=\"language-text\">.?</code>)</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> adventurer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span>\n <span class=\"token literal-property property\">cat</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Dinah'</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>adventurer<span class=\"token punctuation\">.</span>cat<span class=\"token operator\">?.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Dinah</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>adventurer<span class=\"token punctuation\">.</span>dog<span class=\"token operator\">?.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>adventurer<span class=\"token punctuation\">.</span>someNonExistentMethod<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">참조: MDN Optional chaining</a></p>\n<hr>\n<h2>4. 객체</h2>\n<ul>\n<li>프로토타입(<code class=\"language-text\">__proto__</code>) 활용을 추천하지 않는다.</li>\n</ul>\n<h3>4.1 프로퍼티</h3>\n<ul>\n<li>프로퍼티 축약 표현을 추천한다.</li>\n<li>계산된 프로퍼티 이름 활용 방식이 있다.</li>\n</ul>\n<h4>4.1.1 프로퍼티 축약 표현</h4>\n<ul>\n<li>프로퍼티명과 프로퍼티에 할당하는 변수명이 같을 경우 그대로 쓴다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> name<span class=\"token operator\">=</span> <span class=\"token string\">'john'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> member <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token literal-property property\">idx</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n name<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 프로퍼티 명과 프로퍼티에 할당하는 값의 변수명이 같다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {idx: 1, name: 'john'}</span></code></pre></div>\n<h5>4.4.1.2 계산된 프로퍼티 이름</h5>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">'prop'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefix<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">++</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>i<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefix<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">++</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>i<span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>prefix<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">++</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>i<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {prop-1: 1, prop-2: 2, prop-3: 3}</span></code></pre></div>\n<h4>4.4.2 메서드</h4>\n<ul>\n<li>적절한 상황에 메서드 축약 표현을 사용한다.</li>\n</ul>\n<h5>4.4.2.1 메서드 축약 표현</h5>\n<ul>\n<li>ES6 이후에서의 메서드란, 축약 표현으로 정의된 함수만을 의미한다.</li>\n<li>메서드는 생성자 함수로써 쓰일 수 없다.</li>\n<li>메서드는 프로토타입이 없다.</li>\n<li>메서드는 <code class=\"language-text\">super</code>를 사용 가능하다. (프로토타입)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Lee'</span><span class=\"token punctuation\">,</span>\n <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi I'm\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h2>5. 함수</h2>\n<ul>\n<li>JavaScript 함수는 다음과 같다.\n<ul>\n<li>일반 function\n<ul>\n<li>익명 함수</li>\n</ul>\n</li>\n<li>화살표 함수</li>\n<li>생성자</li>\n<li>메서드</li>\n</ul>\n</li>\n</ul>\n<h3>5.1 this</h3>\n<ul>\n<li>this는 함수 선언 방식에 따라, 위치가 다르므로, 사용을 최소화할 것을 추천한다.</li>\n</ul>\n<h4>5.1.1 일반 function</h4>\n<ul>\n<li>this는 function을 선언한 위치가 된다.</li>\n<li>call by sharing 이므로 this는 공유된다.</li>\n<li>객체로서 객체 내부의 값을 연산할 필요성이 있을때 추천한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//foo</span></code></pre></div>\n<h4>5.1.2 화살표 함수</h4>\n<ul>\n<li>this는 화살표 함수를 호출한 위치가 된다.</li>\n<li>모듈의 기능 제공에 추천한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nfoo<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// bar</span></code></pre></div>\n<h4>5.1.3 생성자 함수(new)에 의한 인스턴스의 function</h4>\n<ul>\n<li>this는 생성된 인스턴스를 의미한다.</li>\n<li>객체 생성 방식을 추천하지 않는다.\n<ul>\n<li>하나의 로직 안에서 동일한 구조의 객체를 여러번 생성할 때, 추천한다.</li>\n<li>생성자 함수로 사용시, return을 지양한다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Circle</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">radius</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">=</span> radius<span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getDiameter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> circle1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> circle2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// this는 각각의 인스턴스를 가리킨다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>circle1<span class=\"token punctuation\">.</span><span class=\"token function\">getDiameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>circle2<span class=\"token punctuation\">.</span><span class=\"token function\">getDiameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//20</span></code></pre></div>\n<h3>5.2 함수 호이스팅 방지</h3>\n<ul>\n<li>const 로 변수 선언과 할당을 함으로써, 함수의 호이스팅을 방지한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* 함수 선언시 호이스팅이 적용되므로, const로 할당함으로써, 혼동을 방지한다.\n (컴파일러의 '=' 기준 우측 표현식 우선 파싱 특징을 이용한, 호이스팅 방지) */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ~</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ~</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>5.3 책임 분리</h3>\n<ul>\n<li>책임에 따라 적확하게 작명한다.</li>\n<li>콜스택이 쌓이더라도, 하나의 함수는 하나의 동작만 하는 것을 추천한다.</li>\n<li>'데이터 호출' / '비즈니스' / '프레젠테이션'으로 로직을 분리할 것을 추천한다.</li>\n<li>parameter/return을 명확히하고 독립적으로 작성함으로써, 사이드이펙트를 줄이는 방향을 지향한다.</li>\n</ul>\n<h4>5.3.1 데이터 호출 함수</h4>\n<ul>\n<li>API로 부터 데이터 호출</li>\n<li>사이드이펙트를 지양한다.\n<ul>\n<li>input과 output을 명확히 하고, 외부와 독립한다.</li>\n</ul>\n</li>\n</ul>\n<h4>5.3.2 비즈니스 로직 함수</h4>\n<ul>\n<li>유효성 연산</li>\n<li>기타 연산</li>\n<li>사이드이펙트를 지양한다.\n<ul>\n<li>input과 output을 명확히 하고, 외부와 독립한다.</li>\n</ul>\n</li>\n</ul>\n<h4>5.3.3 프레젠테이션 로직 함수</h4>\n<ul>\n<li>DOM 객체 어트리뷰트 / 프로퍼티에 영향</li>\n<li>event 처리</li>\n</ul>\n<h3>5.4 매개변수</h3>\n<h4>5.4.1 default 매개변수</h4>\n<ul>\n<li>작성을 추천한다.</li>\n<li>타입과 기본값 명시 용도</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">bar <span class=\"token operator\">=</span> <span class=\"token number\">1</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<h4>5.4.2 구조분해 할당</h4>\n<ul>\n<li>인자를 facade하게 하는 것을 추천한다.\n<ul>\n<li>매개변수 갯수는 3개 초과 되지 않는 것을 추천한다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> depart<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> kind <span class=\"token operator\">=</span> <span class=\"token string\">'참가자'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>kind <span class=\"token operator\">+</span> <span class=\"token string\">'는 '</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span><span class=\"token string\">'살 '</span><span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'이며, '</span><span class=\"token operator\">+</span> depart <span class=\"token operator\">+</span> <span class=\"token string\">'입니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'철수'</span><span class=\"token punctuation\">,</span>\n <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span>\n <span class=\"token literal-property property\">depart</span><span class=\"token operator\">:</span> <span class=\"token string\">'1반'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">,</span> <span class=\"token string\">'도전자'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 도전자는 19살 철수이며, 1반입니다.</span></code></pre></div>\n<h4>5.4.3 나머지 매개변수 (<code class=\"language-text\">...</code>)</h4>\n<ul>\n<li>나머지 매개변수 활용을 추천한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>members</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 나머지 매개변수</span>\n <span class=\"token keyword\">const</span> outputString <span class=\"token operator\">=</span> members<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> cur<span class=\"token punctuation\">,</span> idx</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> acc <span class=\"token operator\">+</span> idx <span class=\"token operator\">+</span> <span class=\"token string\">'.'</span> <span class=\"token operator\">+</span> cur <span class=\"token operator\">+</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>outputString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0.철수 1.영희 2.짱구 3.훈이 </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> members <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'철수'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'영희'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'짱구'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'훈이'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>members<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 전개 연산자</span></code></pre></div>\n<hr>\n<h2>6. 비동기</h2>\n<ul>\n<li>콜백 방식 부정적\n<ul>\n<li>콜백 지옥 우려</li>\n</ul>\n</li>\n<li>비동기를 위한, 프로미스 처리 기능 추천 (다음 중 택 1)\n<ol>\n<li>프로미스 처리 함수 then</li>\n<li>async await</li>\n</ol>\n</li>\n<li>쿼리 요청(트래픽)을 줄이고자, 쓰로틀링과 디바운스 처리를 지향한다.</li>\n</ul>\n<h3>6.1 프로미스 처리: 체이닝 함수 <code class=\"language-text\">then</code></h3>\n<ul>\n<li>세부적인 프로미스 처리가 가능하다.</li>\n<li>async await 방식을 좀 더 추천\n<ul>\n<li>then을 통해 코드의 들여쓰기가 많아지면, 가독성이 저해된다.</li>\n<li>catch 구문이 많아지면, 가독성이 저해된다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Test1ApiCall <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n axios\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user?ID=12345'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 응답(성공)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Response >>\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 응답(실패)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error >>\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 응답(항상 실행)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// then 을 연속적으로 호출하는 예시</span>\n<span class=\"token comment\">// 복잡하다.. => async await 추천</span>\n<span class=\"token keyword\">const</span> Test2ApiCall <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// axios 요청1</span>\n axios\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://test.com/api/v1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">const</span> userId <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// axios 요청2</span>\n   axios\n    <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://test2.com/api/v2/'</span> <span class=\"token operator\">+</span> userId<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Response >>\"</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error >>\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error >>\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>6.2 async await</h3>\n<ul>\n<li>try catch와 같이 사용이 용이하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// async/await 를 활용하는 수정된 방식</span>\n<span class=\"token keyword\">const</span> Test2ApiCall <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// axios 요청1</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://test.com/api/v1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> userId <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// axios 요청2</span>\n  <span class=\"token keyword\">const</span> response2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://test2.com/api/v2/'</span> <span class=\"token operator\">+</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Response >>\"</span><span class=\"token punctuation\">,</span> response2<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error >>\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'끝'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Test2ApiCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 출력 순서</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// 5</span>\n<span class=\"token comment\">// 6</span>\n<span class=\"token comment\">// 7</span>\n<span class=\"token comment\">// 8</span>\n<span class=\"token comment\">// Response >> ~ or Error >> ~ </span></code></pre></div>\n<ul>\n<li>비동기 처리시, await을 만나는 순간, async 함수 바깥의 콜스택을 처리한다는 점을 주의</li>\n</ul>\n<h3>6.3 중첩된 비동기 처리</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 잘못된 예</span>\n<span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'fs-promise'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">printFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getFilePaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Assume this works fine</span>\n\n files<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">printFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 작동하지만, printFiles가 비동기를 한번에 실행, 기다리지 않고 바로 리턴</span></code></pre></div>\n<ul>\n<li>바벨은 async/await를 generator 함수로 변환하는데, forEach를 쓰면 각각의 이터레이션이 개별 generator 함수를 갖게 된다.\n<ul>\n<li>next( ) 컨텍스트가 아니다.</li>\n</ul>\n</li>\n</ul>\n<h4>6.3.1 <code class=\"language-text\">for ... of ...</code> 순서대로 비동기 처리</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">printFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getFilePaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> file <span class=\"token keyword\">of</span> files<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>6.3.2 <code class=\"language-text\">reduce</code> 함수</h4>\n<ul>\n<li>순서를 보장하는 reduce를 사용\n<ul>\n<li>map, filter는 순서를 보장하지 않는다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">printFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getFilePaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">await</span> files<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">promise<span class=\"token punctuation\">,</span> file</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> promise<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이전 프로미스들의 resolve를 기다린다.</span>\n  <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>6.3.3 <code class=\"language-text\">Promise.all( )</code> 비동기 처리</h4>\n<ul>\n<li>map은 새 배열을 반환하기 때문에,\n<ul>\n<li>매개변수로 배열을 받는 Promise.all 안에 배열을 매핑한다.</li>\n<li>같은 이유로 forEach는 안된다. 리턴값을 기다리지 않기 때문이다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">printFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getFilePaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>contents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>참조</li>\n<li><a href=\"stackoverflow.com/questions/37576685/using-async-await-with-a-foreach-loop\">stackoverflow: Using async/await with a forEach loop</a></li>\n<li><a href=\"www.pluralsight.com/guides/handling-nested-promises-using-asyncawait-in-react\">Handling Nested Promises Using Async/Await in React</a></li>\n</ul>\n<h3>6.4 쓰로틀링과 디바운스 처리</h3>\n<h4>6.4.1 디바운스(Debouncing)</h4>\n<ul>\n<li>일정 시간동안 대기, 대기 중 함수가 호출된다면, 대기 시간 초기화\n<ul>\n<li>Ex) 단어 검색 자동 조회</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> timer<span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// ~~~내용~~~</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>6.4.2 쓰로틀링(Throttling)</h4>\n<ul>\n<li>마지막 실행후, 일정 시간까지 대기\n<ul>\n<li>Ex) 스크롤 다운 추가 조회</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> timer<span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// ~~~내용~~~</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"JavaScript 문법","date":"March 02, 2023","description":"JavaScript 문법 정리","category":["javascript","basic"]}},"previous":null,"next":{"fields":{"slug":"/java/Java_문법/"},"frontmatter":{"title":"Java 문법","category":["java"]}}},"pageContext":{"id":"684da5d5-a914-572f-a497-6a8f62e31a9b","previousPostId":null,"nextPostId":"8d862543-39d1-5268-b958-be39a53a0a04"}},"staticQueryHashes":["1408108323","3764592887","62622001"],"slicesMap":{}}