{"version":3,"file":"component---src-pages-404-js-582a98b80cd634109c4b.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/navi/sidebar.js","webpack://gatsby-starter-blog/./src/components/bio/bio.js","webpack://gatsby-starter-blog/./src/components/layout/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/404.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link, graphql, useStaticQuery } from 'gatsby';\nimport './sidebar.css';\n\nconst Sidebar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark {\n        group(field: { frontmatter: { category: SELECT } }) {\n          fieldValue\n        }\n      }\n    }\n  `);\n\n  const categories = data.allMarkdownRemark.group.map(group => group.fieldValue);\n\n  const toggleMenu = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className=\"hamburger-menu\">\n      <button onClick={toggleMenu} className={`hamburger-button ${isOpen ? 'shifted' : ''}`}>\n        {isOpen ? (\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n            <line x1=\"4\" y1=\"4\" x2=\"20\" y2=\"20\" stroke=\"white\" strokeWidth=\"2\" />\n            <line x1=\"20\" y1=\"4\" x2=\"4\" y2=\"20\" stroke=\"white\" strokeWidth=\"2\" />\n          </svg>\n        ) : (\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n            <line x1=\"4\" y1=\"12\" x2=\"20\" y2=\"12\" stroke=\"white\" strokeWidth=\"2\" />\n            <line x1=\"4\" y1=\"6\" x2=\"20\" y2=\"6\" stroke=\"white\" strokeWidth=\"2\" />\n            <line x1=\"4\" y1=\"18\" x2=\"20\" y2=\"18\" stroke=\"white\" strokeWidth=\"2\" />\n          </svg>\n        )}\n      </button>\n      <nav className={`sidebar ${isOpen ? 'open' : ''}`}>\n        <ul>\n          <Link to={`/`}>전체 리스트</Link>\n          {categories.map(category => (\n            <li key={category}>\n              <Link to={`/categories/${category}/`}>{category}</Link>\n            </li>\n          ))}\n        </ul>\n      </nav>\n      <div className={`content ${isOpen ? 'shifted' : ''}`}>\n        {/* 여기에 페이지 내용을 추가합니다 */}\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;","import * as React from \"react\"\nimport { Link, useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport \"./bio.css\" // bio.css 파일 임포트\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            instagram\n            github\n            linkedin\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n  const {instagram, github, linkedin} = social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"https://avatars.githubusercontent.com/u/37289223?v=4\"\n        width={75}\n        height={75}\n        quality={75}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          <strong><Link to=\"/\">{author.name}</Link></strong>\n          <br />\n          {author?.summary || null}\n          <br />\n          <a href={`https://github.com/${github}`}>\n            <img src=\"https://img.shields.io/badge/github-181717?style=for-the-badge&logo=github&logoColor=white\" alt=\"GitHub badge\" />\n          </a>\n          {` `}\n          <a href={`https://www.linkedin.com/${linkedin}`}>\n            <img src=\"https://img.shields.io/badge/linkedin-007CC3?style=for-the-badge&logo=linkedin&logoColor=white\" alt=\"LinkedIn badge\" />\n          </a>\n          {` `}\n          <a href={`https://www.instagram.com/${instagram}`}>\n            <img src=\"https://img.shields.io/badge/instagram-FF0069?style=for-the-badge&logo=instagram&logoColor=white\" alt=\"Instagram badge\" />\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport Sidebar from \"../navi/sidebar\"\nimport Bio from \"../bio/bio\"\nimport \"./layout.css\" \n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location ? location.pathname === rootPath : false\n  let header\n\n  header = (\n    <h1 className=\"main-heading\">\n      <Link to=\"/\">{title}</Link>\n    </h1>\n  )\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <Sidebar/>\n      <header className=\"global-header\">\n        <div className=\"header-container\">\n          {header}\n        </div>\n      </header>\n      <main>{children}</main>\n      <footer>\n        <Bio />\n      </footer>\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string,\n  }),\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ title, description, image, lang = \"kr\", meta = [], children, location }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaTitle = title || `The Engineer, Aiming Fine.`\n  const metaDescription = description || site.siteMetadata.description\n  const metaImage = image || `https://avatars.githubusercontent.com/u/37289223?v=4`\n  const canonical = `${site.siteMetadata.siteUrl}${location ? location.pathname : \"\"}`\n\n  // 구조화된 데이터 설정\n  const schemaOrgWebPage = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"WebPage\",\n    url: canonical,\n    headline: metaTitle,\n    inLanguage: lang,\n    mainEntityOfPage: canonical,\n    description: metaDescription,\n    name: metaTitle,\n    author: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"Lshh\",\n    },\n    copyrightHolder: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"Lshh\",\n    },\n    copyrightYear: new Date().getFullYear(),\n    creator: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"Lshh\",\n    },\n    publisher: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"Lshh\",\n    },\n    image: {\n      \"@type\": \"ImageObject\",\n      url: metaImage,\n    },\n    datePublished: new Date().toISOString(),\n  }\n\n  // 블로그 포스트에 대한 구조화된 데이터\n  const schemaArticle = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BlogPosting\",\n    url: canonical,\n    name: metaTitle,\n    headline: metaTitle,\n    image: {\n      \"@type\": \"ImageObject\",\n      url: metaImage,\n    },\n    description: metaDescription,\n    author: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"lshh\",\n    },\n    publisher: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"lshh\",\n      logo: {\n        \"@type\": \"ImageObject\",\n        url: metaImage,\n      },\n    },\n    mainEntityOfPage: canonical,\n    datePublished: new Date().toISOString(),\n  }\n\n  return (\n    <Helmet\n      htmlAttributes={{ lang }}\n      title={metaTitle}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      link={[\n        {\n          rel: \"canonical\",\n          href: `${site.siteMetadata.siteUrl}${location ? location.pathname : \"\"}`\n        }\n      ]}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: `robots`,\n          content: `index, follow`\n        },\n        {\n          property: `og:title`,\n          content: metaTitle,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          property: `og:url`,\n          content: canonical,\n        },\n        {\n          property: `og:image`,\n          content: metaImage,\n        },\n        {\n          property: `og:image:alt`,\n          content: metaTitle,\n        },\n        {\n          property: `og:site_name`,\n          content: site.siteMetadata.title,\n        },\n      ].concat(meta)}\n    >\n      {children}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgWebPage)}\n      </script>\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaArticle)}\n      </script>\n    </Helmet>\n  )\n}\nSEO.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  children: PropTypes.node,\n  location: PropTypes.object,\n}\n\nexport default SEO\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout/layout\"\nimport Seo from \"../components/seo\"\nimport PropTypes from \"prop-types\"\n\nconst NotFoundPage = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h1>404: Not Found</h1>\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"404: Not Found\" />\n\nNotFoundPage.propTypes = {\n  data: PropTypes.shape({\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n  location: PropTypes.object.isRequired,\n}\n\nexport default NotFoundPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"names":["isOpen","setIsOpen","useState","categories","useStaticQuery","allMarkdownRemark","group","map","fieldValue","className","onClick","width","height","viewBox","x1","y1","x2","y2","stroke","strokeWidth","Link","to","category","key","data","author","site","siteMetadata","social","instagram","github","linkedin","S","layout","formats","src","quality","alt","name","summary","href","location","title","children","isRootPath","pathname","header","description","image","lang","meta","metaTitle","metaDescription","metaImage","canonical","siteUrl","schemaOrgWebPage","url","headline","inLanguage","mainEntityOfPage","copyrightHolder","copyrightYear","Date","getFullYear","creator","publisher","datePublished","toISOString","schemaArticle","logo","htmlAttributes","titleTemplate","link","rel","content","property","concat","type","JSON","stringify","Head","siteTitle"],"sourceRoot":""}