{"data":{"allMarkdownRemark":{"nodes":[{"id":"2e57f4d4-7b3c-59dd-bba6-7c5e8ada070d","frontmatter":{"title":"API 베스트 프렉티스"},"excerpt":"1. 리소스 상태 전이 메커니즘 진정한 무상태성은 각 요청이 완전한 컨텍스트를 포함해야 함. 서버는 요청 간 클라이언트 세션 상태를 유지하지 않음. 리소스 상태 전이가 애플리케이션 흐름을 주도함. 2. 하이퍼미디어 제어 (HATEOAS…"},{"id":"4b9c800c-3ccb-5d18-8737-a96740be2082","frontmatter":{"title":"애플리케이션의 CQRS"},"excerpt":"유스 케이스는 애플리케이션의 기능을 나타냅니다: 현재 사용자 정보 가져오기 쇼핑 카트에 아이템 추가하기 주문 결제 환불하기 저는 하나의 유스 케이스(기능)를 중심으로 코드를 구조화합니다. CQRS와 함께하는 유스 케이스 Command…"},{"id":"76ec3748-c1b9-5418-8392-6b9d69de4b58","frontmatter":{"title":"clean test suite"},"excerpt":"클린 코드 팁: 깨끗한 테스트 없이는 깨끗한 코드를 가질 수 없다 테스트는 코드 품질의 핵심입니다. 깨끗한 테스트는 다음과 같은 특징을 가져야 합니다  깨끗한 테스트의 특징 단순함 (Simple…"},{"id":"09205999-d9ab-58cf-815a-1f93be3378ac","frontmatter":{"title":"JPA"},"excerpt":"JDBC vs JPA Spring Data JPA의 작동 방식 JPA와 ORM에 대한 베스트 프렉티스 가이드 1. JDBC vs JPA Java에서 관계형 데이터베이스를 사용할 때, JDBC(Java Database Connectivity)와 JPA…"},{"id":"8c8e543a-416d-5b2d-b2d8-38f12df4a6b6","frontmatter":{"title":"JVM"},"excerpt":"Java는 모바일 애플리케이션부터 대규모 엔터프라이즈 시스템까지 다양한 영역에서 사용되는 세계적으로 널리 쓰이는 프로그래밍 언어입니다. 그러나 Java 프로그램을 작성하고 실행하며 동작시키기 위해서는 Java 생태계의 세 가지 핵심 구성 요소인 JDK…"},{"id":"207578eb-1b65-5d80-add5-ffcc96ceace9","frontmatter":{"title":"GraalVM, JVM 비교"},"excerpt":"GraalVM이란? GraalVM 특징 네이티브 Java 코드 실행 GraalVM에서 Java 코드 실행 방식 GraalVM 아키텍처 AOT 컴파일 GraalVM vs JVM 1. GraalVM이란? GraalVM은 Ahead-Of-Time (AOT…"},{"id":"8d862543-39d1-5268-b958-be39a53a0a04","frontmatter":{"title":"Java 문법"},"excerpt":"Java 문법 0. Java 기초 0.1 OOP 특징 0.2 OOP 설계 5원칙 SOLID 0.3 타입 0.3.1 Call by Value 0.3.2 Call by Reference 0.3.3 String 0.3.4 연산된 값 0.4 접근자 0.…"},{"id":"605a21ec-7917-516d-8a8c-0c37338d84e6","frontmatter":{"title":"0. 목차"},"excerpt":"Java 환경 Java API Layered Architecture SpringBoot Gradle 테스트 자바 - 핵심 동작 개념 jvm, class, gc, main 함수 jvm 빌드, 컴파일 런타임, gc…"},{"id":"dd3fec95-62f2-566d-8670-cb93efd39a1a","frontmatter":{"title":"1. Java 환경"},"excerpt":"1.1. JDK 구성 요소 JVM (Java Virtual Machine) JRE (Java Runtime Environment) JDK (Java Development Kit) 1.1.1. JVM (Java Virtual Machine) Java…"},{"id":"c49d96f8-0cef-5748-a876-086e013282c1","frontmatter":{"title":"2. Java API"},"excerpt":"2.1. 타입 2.1.1. 원시 타입 (Primitive Types) **원시 타입(Primitive Types)**은 자바에서 객체가 아닌 가장 기본적인 데이터 유형입니다. 언어에 의해 미리 정의된…"},{"id":"aca95404-75af-5d2a-ae37-68b9cfd8fdcb","frontmatter":{"title":"3. Layered Architecture"},"excerpt":"**Martin Fowler의 \"엔터프라이즈 애플리케이션 아키텍처 패턴\"**에 따르면, 소프트웨어는 계층화된 구조를 통해 복잡성을 관리합니다. 상위 계층은 하위 계층의 서비스를 활용하지만, 하위 계층은 상위 계층을 인식하지 않습니다. 3.1.…"},{"id":"54094c6a-bf42-5bf0-a699-cf1c0b0ce529","frontmatter":{"title":"4. SpringBoot"},"excerpt":"스프링(SPRING)은 자바(Java) 기반의 엔터프라이즈 애플리케이션 개발을 단순화하고 유연하게 만들기 위해 등장한 프레임워크입니다. 기존 JEE(J2EE)가 가진 복잡한 설정 문제를 해결하기 위해 의존성 주입(Dependency Injection…"},{"id":"4f536543-17ea-5356-bb06-bcea7784b0e3","frontmatter":{"title":"6. 테스트"},"excerpt":"단위 테스트\n스프링 부트 테스트"},{"id":"e787652a-a382-524d-a5fb-0a66d70b8603","frontmatter":{"title":"5. Gradle"},"excerpt":"패키지 관리자 명령어 의존성 메이븐 기본적인 설정 스프링 재단"},{"id":"693e29ac-e6a3-5549-a35a-83b2408b608d","frontmatter":{"title":"데이터 캐싱"},"excerpt":"이 다이어그램은 일반적인 아키텍처에서 데이터가 캐싱되는 위치를 설명합니다. 데이터는 여러 계층에 걸쳐 캐싱됩니다.  1. 클라이언트 애플리케이션 HTTP 응답은 브라우저에서 캐싱될 수 있습니다. 흐름: 처음 데이터 요청 시, HTTP…"},{"id":"581b8974-e451-5b5f-b584-2c9d39951ed6","frontmatter":{"title":"PG 주의사항"},"excerpt":"대부분의 문제는 초기에는 드러나지 않지만, 데이터가 많아지고 쿼리가 복잡해질수록 심각한 성능 문제로 이어질 수 있습니다.…"},{"id":"040caf11-c5c4-58f8-b5f4-85c161ca282a","frontmatter":{"title":"Fine Engineer가 되기 위한 조건: 신념, 철학, 패러다임"},"excerpt":"나는 fine한 엔지니어가 되길 희망한다. 무엇이 fine…"}]}}}