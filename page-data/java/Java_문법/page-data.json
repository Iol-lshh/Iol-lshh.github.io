{"componentChunkName":"component---src-templates-blog-post-js","path":"/java/Java_문법/","result":{"data":{"site":{"siteMetadata":{"title":"Iol-lshh's"}},"markdownRemark":{"id":"8d862543-39d1-5268-b958-be39a53a0a04","excerpt":"Java 문법 0. Java 기초 0.1 OOP 특징 0.2 OOP 설계 5원칙 SOLID 0.3 타입 0.3.1 Call by Value 0.3.2 Call by Reference 0.3.3 String 0.3.4 연산된 값 0.4 접근자 0.5 OOP 1. 동작 파라미터 1.…","html":"<ul>\n<li><a href=\"#java-%EB%AC%B8%EB%B2%95\">Java 문법</a>\n<ul>\n<li><a href=\"#0-java-%EA%B8%B0%EC%B4%88\">0. Java 기초</a>\n<ul>\n<li><a href=\"#01-oop-%ED%8A%B9%EC%A7%95\">0.1 OOP 특징</a></li>\n<li><a href=\"#02-oop-%EC%84%A4%EA%B3%84-5%EC%9B%90%EC%B9%99-solid\">0.2 OOP 설계 5원칙 SOLID</a></li>\n<li><a href=\"#03-%ED%83%80%EC%9E%85\">0.3 타입</a>\n<ul>\n<li><a href=\"#031-call-by-value\">0.3.1 Call by Value</a></li>\n<li><a href=\"#032-call-by-reference\">0.3.2 Call by Reference</a></li>\n<li><a href=\"#033-string\">0.3.3 String</a></li>\n<li><a href=\"#034-%EC%97%B0%EC%82%B0%EB%90%9C-%EA%B0%92\">0.3.4 연산된 값</a></li>\n</ul>\n</li>\n<li><a href=\"#04-%EC%A0%91%EA%B7%BC%EC%9E%90\">0.4 접근자</a></li>\n<li><a href=\"#05-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4\">0.5 OOP</a></li>\n</ul>\n</li>\n<li><a href=\"#1-%EB%8F%99%EC%9E%91-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0\">1. 동작 파라미터</a>\n<ul>\n<li><a href=\"#10-%EB%A9%94%EC%84%9C%EB%93%9C\">1.0 메서드</a>\n<ul>\n<li><a href=\"#101-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%8B%9C%EA%B7%B8%EB%8B%88%EC%B2%98\">1.0.1 메서드 시그니처</a></li>\n<li><a href=\"#102-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9\">1.0.2 메서드 오버로딩</a></li>\n</ul>\n</li>\n<li><a href=\"#11-%ED%95%A8%EC%88%98%ED%98%95-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%99%80-%EA%B5%AC%ED%98%84-%ED%81%B4%EB%9E%98%EC%8A%A4\">1.1 함수형 인터페이스와 구현 클래스</a>\n<ul>\n<li><a href=\"#111-%EC%B6%94%EC%83%81%EC%A0%81-%EC%A1%B0%EA%B1%B4%EC%9C%BC%EB%A1%9C-%ED%95%84%ED%84%B0%EB%A7%81\">1.1.1 추상적 조건으로 필터링</a></li>\n<li><a href=\"#112-%EC%9D%B5%EB%AA%85-%ED%81%B4%EB%9E%98%EC%8A%A4\">1.1.2 익명 클래스</a></li>\n</ul>\n</li>\n<li><a href=\"#12-%EB%9E%8C%EB%8B%A4\">1.2 람다</a></li>\n<li><a href=\"#13-%EC%A0%9C%EB%84%A4%EB%A6%AD-generic\">1.3 제네릭 Generic</a></li>\n<li><a href=\"#14-%ED%95%A8%EC%88%98-%EB%94%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%84%B0\">1.4 함수 디스크립터</a>\n<ul>\n<li><a href=\"#141-%EA%B8%B0%EB%B3%B8-%EC%A0%9C%EA%B3%B5-%ED%95%A8%EC%88%98%ED%98%95-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%9E%90%EB%B0%948\">1.4.1 기본 제공 함수형 인터페이스 (자바8)</a></li>\n</ul>\n</li>\n<li><a href=\"#15-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%B0%B8%EC%A1%B0\">1.5 메서드 참조 ::</a></li>\n<li><a href=\"#16-%EC%83%9D%EC%84%B1%EC%9E%90-%EC%B0%B8%EC%A1%B0\">1.6 생성자 참조</a></li>\n</ul>\n</li>\n<li><a href=\"#2-%EC%BB%AC%EB%A0%89%EC%85%98\">2. 컬렉션</a>\n<ul>\n<li><a href=\"#21-%EC%83%81%EC%86%8D-%EA%B4%80%EA%B3%84\">2.1 상속 관계</a>\n<ul>\n<li><a href=\"#211-list\">2.1.1 List</a>\n<ul>\n<li><a href=\"#2111-stack\">2.1.1.1 Stack</a></li>\n<li><a href=\"#2112-vector\">2.1.1.2 Vector</a></li>\n<li><a href=\"#2113-arraylist\">2.1.1.3 ArrayList</a></li>\n</ul>\n</li>\n<li><a href=\"#212-set\">2.1.2 Set</a>\n<ul>\n<li><a href=\"#2121-hashset\">2.1.2.1 HashSet</a></li>\n</ul>\n</li>\n<li><a href=\"#213-map\">2.1.3 Map</a>\n<ul>\n<li><a href=\"#2131-hashtable\">2.1.3.1 Hashtable</a></li>\n<li><a href=\"#2132-hashmap\">2.1.3.2 HashMap</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#22-sorted\">2.2 Sorted</a>\n<ul>\n<li><a href=\"#221-comparator\">2.2.1 Comparator</a></li>\n</ul>\n</li>\n<li><a href=\"#23-comparable\">2.3 Comparable</a></li>\n</ul>\n</li>\n<li><a href=\"#3-%EC%8A%A4%ED%8A%B8%EB%A6%BC\">3. 스트림</a>\n<ul>\n<li><a href=\"#31-%EC%97%B0%EC%82%B0-%ED%95%A8%EC%88%98\">3.1 연산 함수</a></li>\n</ul>\n</li>\n<li><a href=\"#4-optional---null-%EC%B2%98%EB%A6%AC\">4. Optional - null 처리</a>\n<ul>\n<li><a href=\"#41-%EC%9E%91%EB%8F%99-%EB%B0%A9%EC%8B%9D\">4.1 작동 방식</a>\n<ul>\n<li><a href=\"#411-null-%EC%B0%B8%EC%A1%B0-%EC%B2%98%EB%A6%AC-%EC%98%88\">4.1.1 null 참조 처리 예</a></li>\n<li><a href=\"#412-optional-%EC%B2%98%EB%A6%AC%EC%9D%98-%EC%98%88\">4.1.2 Optional 처리의 예</a></li>\n</ul>\n</li>\n<li><a href=\"#42-optional-%EB%9E%A9-%EB%A9%94%EC%84%9C%EB%93%9C\">4.2 Optional 랩 메서드</a>\n<ul>\n<li><a href=\"#421-%EB%B9%88-optional---optionalempty\">4.2.1 빈 Optional - Optional.empty</a></li>\n<li><a href=\"#422-null%EC%9D%B4-%EC%95%84%EB%8B%8C-optional---optionalof\">4.2.2 null이 아닌 Optional - Optional.of</a></li>\n<li><a href=\"#423-null%EC%9D%B4-%EA%B0%80%EB%8A%A5%ED%95%9C-optional---optionalofnullable\">4.2.3 null이 가능한 Optional - Optional.ofNullable</a></li>\n</ul>\n</li>\n<li><a href=\"#43-optional-%EC%96%B8%EB%9E%A9-%EB%A9%94%EC%84%9C%EB%93%9C\">4.3 Optional 언랩 메서드</a>\n<ul>\n<li><a href=\"#431-get\">4.3.1 get</a></li>\n<li><a href=\"#432-orelse\">4.3.2 orElse</a></li>\n<li><a href=\"#433-orelseget\">4.3.3 orElseGet</a></li>\n<li><a href=\"#434-orelsethrow\">4.3.4 orElseThrow</a></li>\n<li><a href=\"#435-ifpresent\">4.3.5 ifPresent</a></li>\n<li><a href=\"#436-ifpresentorelse\">4.3.6 ifPresentOrElse</a></li>\n</ul>\n</li>\n<li><a href=\"#44-optional%EC%9D%98-%EC%B2%B4%EC%9D%B4%EB%8B%9D-%EC%B2%98%EB%A6%AC-%EC%8A%A4%ED%8A%B8%EB%A6%BC\">4.4 Optional의 체이닝 처리 (스트림)</a>\n<ul>\n<li><a href=\"#441-map\">4.4.1 map</a></li>\n<li><a href=\"#442-flatmap\">4.4.2 flatMap</a></li>\n<li><a href=\"#443-filter\">4.4.3 filter</a></li>\n<li><a href=\"#444-stream\">4.4.4 stream</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#5-%EC%8B%9C%EA%B0%84\">5. 시간</a>\n<ul>\n<li><a href=\"#51-%ED%81%B4%EB%9E%98%EC%8A%A4\">5.1 클래스</a>\n<ul>\n<li><a href=\"#511-localdate\">5.1.1 LocalDate</a></li>\n<li><a href=\"#512-localtime\">5.1.2 LocalTime</a></li>\n<li><a href=\"#513-localdatetime\">5.1.3 LocalDateTime</a></li>\n<li><a href=\"#514-instant\">5.1.4 Instant</a></li>\n<li><a href=\"#515-duration-period\">5.1.5 Duration, Period</a></li>\n</ul>\n</li>\n<li><a href=\"#52-%EA%B3%B5%ED%86%B5-%EB%A9%94%EC%84%9C%EB%93%9C\">5.2 공통 메서드</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>Java 문법</h1>\n<h1>0. Java 기초</h1>\n<h2>0.1 OOP 특징</h2>\n<ol>\n<li>캡슐화</li>\n<li>추상화</li>\n<li>상속</li>\n<li>다형성</li>\n</ol>\n<h2>0.2 OOP 설계 5원칙 SOLID</h2>\n<ul>\n<li>객체 지향 설계시 지켜야할 원칙</li>\n</ul>\n<ol>\n<li>SRP(Single Responsibility Principle): 단일 책임 원칙</li>\n<li>OCP(Open Closed Priciple): 개방 폐쇄 원칙</li>\n<li>LSP(Listov Substitution Priciple): 리스코프 치환 원칙</li>\n<li>ISP(Interface Segregation Principle): 인터페이스 분리 원칙</li>\n<li>DIP(Dependency Inversion Principle): 의존 역전 원칙</li>\n</ol>\n<h2>0.3 타입</h2>\n<h3>0.3.1 Call by Value</h3>\n<ul>\n<li>기본 타입\n<ul>\n<li>byte, int, char, boolean ...</li>\n<li>변수의 메모리 위치에 바로 값을 가진다.</li>\n</ul>\n</li>\n</ul>\n<h3>0.3.2 Call by Reference</h3>\n<ul>\n<li>Array, Object</li>\n<li>Copy\n<ul>\n<li>shallow copy</li>\n<li>deep copy</li>\n</ul>\n</li>\n</ul>\n<h3>0.3.3 String</h3>\n<ul>\n<li>Immutable</li>\n<li>StringBuffer\n<ul>\n<li>수정이 많은 String 사용시, 지향</li>\n</ul>\n</li>\n</ul>\n<h3>0.3.4 연산된 값</h3>\n<ul>\n<li>getter, setter</li>\n<li>predicate: boolean 값을 반환하는 함수</li>\n</ul>\n<h2>0.4 접근자</h2>\n<ul>\n<li>public: 접근 제한이 없는</li>\n<li>private: 클래스 내에서만 접근 가능한</li>\n<li>protected: 동일한 패키지 또는 파생클래스에서만 접근 가능한</li>\n<li>static: 고정된\n<ul>\n<li>객체 생성 없이 사용할 수 있는 필드와 메소드를 생성하고자</li>\n<li>객체 참조 없이 바로 사용</li>\n</ul>\n</li>\n<li>final: 최종적인\n<ul>\n<li>값이 저장되면 최종적인 값이 되므로, 수정이 불가능</li>\n</ul>\n</li>\n<li>static final: 상수 (고정된 최종)</li>\n<li>default: 인터페이스에서, 로직을 포함한 메소드 선언 가능한 (기본적인)</li>\n</ul>\n<h2>0.5 인터페이스, 클래스, 인스턴스</h2>\n<ul>\n<li>인터페이스: 객체의 명세\n<ul>\n<li>동작의 추상화: 객체의 외부에서 쓰일 메서드들을 모두 작성</li>\n<li>default 동작: default 접근자로 작성하는 default 로직</li>\n<li>상수</li>\n</ul>\n</li>\n<li>클래스: 객체 생성 틀\n<ul>\n<li>구현하는 인터페이스의 메서드(public)</li>\n<li>클래스 동작을 위한 내부 메서드(private)</li>\n<li>필드(field)</li>\n</ul>\n</li>\n<li>인스턴스: 힙에 올라가는 객체</li>\n</ul>\n<h1>1. 동작 파라미터</h1>\n<ul>\n<li>구성\n<ol>\n<li>호출 로직 (2번을 호출, 3번을 인자로 사용)</li>\n<li>동작 호출 형식 (함수 디스크립터)</li>\n<li>동작 파라미터 (함수 인터페이스와 구현 vs 람다)</li>\n</ol>\n</li>\n</ul>\n<h2>1.0 메서드</h2>\n<h3>1.0.1 메서드 시그니처</h3>\n<ul>\n<li>디자인된 메서드 구조\n<ul>\n<li><strong>메서드 명</strong>과 <strong>파라미터 리스트</strong>로 구성</li>\n</ul>\n</li>\n</ul>\n<h3>1.0.2 메서드 오버로딩</h3>\n<ul>\n<li>같은 메서드 명칭이나, 파라미터 리스트가 달라,\n<ul>\n<li>메서드 시그니처가 다른 메서드들</li>\n<li>하나의 클래스는 2개의 같은 메서드 시그니처를 가질 수 없다.</li>\n<li>메서드 시그니처는 <strong>리턴 타입을 포함하지 않는다.</strong></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">///</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">square</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">///</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>1.1 함수형 인터페이스와 구현 클래스</h2>\n<h3>1.1.1 추상적 조건으로 필터링</h3>\n<ul>\n<li>전략 패턴\n<ul>\n<li>런타임 단계에 논리 구현을 선택</li>\n</ul>\n</li>\n<li>추상적 필터링\n<ul>\n<li>논리 로직과</li>\n<li>세부 조건을 분리</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// # predicate 인터페이스 (3.함수형 인터페이스)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ApplePredicate</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Apple</span> apple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ## 무게 필터링 구현 (3-1.구현된 함수)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span> <span class=\"token class-name\">AppleWeightPredicate</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplePredicate</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Apple</span> apple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> apple<span class=\"token punctuation\">.</span><span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ## 색 필터링 구현 (3-2.구현된 함수)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span> <span class=\"token class-name\">AppleColorPredicate</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ApplePredicate</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Apple</span> apple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">GREEN</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>apple<span class=\"token punctuation\">.</span>getColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// # 추상화된 필터링 함수 (2.호출되는 함수)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">filterApples</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> inventory<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ApplePredicate</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Apple</span> apple<span class=\"token operator\">:</span> inventory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>apple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>      <span class=\"token comment\">// 추상화된 p를 통한 필터링</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>apple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// # 전략 선택을 통한 필터링 (1.호출 로직)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> greenApples <span class=\"token operator\">=</span> <span class=\"token function\">filterApples</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AppleColorPredicate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>함수형 인터페이스\n<ul>\n<li>오직 하나의 추상 메서드를 갖는 인터페이스</li>\n<li>Ex) 자바 API: Comparator, Runnable, Callabel, PrivilegedAction</li>\n</ul>\n</li>\n</ul>\n<h3>1.1.2 익명 클래스</h3>\n<ul>\n<li>이름 없는 클래스</li>\n<li>지역 클래스</li>\n<li>클래스 선언과 인스턴스화를 동시에 진행</li>\n<li>단순한 일회성 동작시\n<ul>\n<li>람다 추천</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> greenApples <span class=\"token operator\">=</span> <span class=\"token function\">filterApples</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplePredicate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Apple</span> apple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">GREEN</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>apple<span class=\"token punctuation\">.</span>getColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>1.2 람다</h2>\n<ul>\n<li>익명 함수를 단순화한 것</li>\n<li>함수형 인터페이스의 추상 메서드를 직접 구현함으로써,\n<ul>\n<li>람다의 전체 표현식을 함수형 인터페이스를 구현한 클래스의 인스턴스로 취급</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> greenApples <span class=\"token operator\">=</span> <span class=\"token function\">filterApples</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Apple</span> apple<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">GREEN</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>apple<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>1.3 제네릭 Generic</h2>\n<ul>\n<li>잘못된 타입의 인입을 컴파일 단계에서 방지한다.</li>\n<li>클래스 외부에서 타입을 지정하기 때문에, 타입 체크와 변환이 필요 없다.</li>\n<li>코드의 재사용성이 높다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 제네릭를 이용한, 추상화 (3.함수형 인터페이스)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 제네릭을 이용한, 필터 (2.호출되는 함수)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> e<span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// T = Apple (1.호출 로직, 3-1.구현된 람다)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> greenApples <span class=\"token operator\">=</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Apple</span> apple<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">GREEN</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>apple<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// T = Integer (1.호출 로직, 3-2.구현된 람다)</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> evenNumbers <span class=\"token operator\">=</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>1.4 함수 디스크립터</h2>\n<ul>\n<li>람다 표현식의 시그니처를 서술해주는 메서드</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// # 함수 디스크립터에 해당 (2.호출되는 함수)</span>\n<span class=\"token comment\">// r의 메서드의 명칭(run), 파라미터 리스트(없음), 반환값(void)을 설명해주고 있다.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    r<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// # 로직과, 람다 표현식 (1.호출 로직, 3.람다)</span>\n<span class=\"token comment\">// 함수형 인터페이스를 구현한 클래스의 인스턴스로써 사용되고 있다.</span>\n<span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"run!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>1.4.1 기본 제공 함수형 인터페이스 (자바8)</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">Predicate&lt;T></code></p>\n<ul>\n<li><code class=\"language-text\">T -> boolean</code></li>\n<li>참/거짓 단정자</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Consumer&lt;T></code></p>\n<ul>\n<li><code class=\"language-text\">T -> void</code></li>\n<li>소비자</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Function&lt;T, R></code></p>\n<ul>\n<li><code class=\"language-text\">T -> R</code></li>\n<li>기능자</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Supplier&lt;T></code></p>\n<ul>\n<li><code class=\"language-text\">() -> T</code></li>\n<li>제공자</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">UnaryOperator&lt;T></code></p>\n<ul>\n<li><code class=\"language-text\">T -> T</code></li>\n<li>단항 연산자</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">BinaryOperator&lt;T></code></p>\n<ul>\n<li><code class=\"language-text\">(T, T) -> T</code></li>\n<li>이중 연산자</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">BiPredicate&lt;T, U></code></p>\n<ul>\n<li><code class=\"language-text\">(T, U) -> boolean</code></li>\n<li>이중 단정자</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">BiConsumer&lt;T, U></code></p>\n<ul>\n<li><code class=\"language-text\">(T, U) -> void</code></li>\n<li>이중 소비자</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">BiFunction&lt;T, U, R></code></p>\n<ul>\n<li><code class=\"language-text\">(T, U) -> R</code></li>\n<li>이중 기능자</li>\n</ul>\n</li>\n</ul>\n<h2>1.5 메서드 참조 ::</h2>\n<ul>\n<li>특정 메서드만 호출하는 기능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// java.util.Comparator.comparing 활용</span>\ninventory<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Apple</span><span class=\"token operator\">::</span><span class=\"token function\">getWeight</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 메서드 참조</span></code></pre></div>\n<ol>\n<li>정적 메서드 참조\n<ul>\n<li>비교\n<ul>\n<li>람다: <code class=\"language-text\">(args) -> ClassName.staticMethods(args)</code></li>\n<li>메서드 참조: <code class=\"language-text\">ClassName::staticMethod</code></li>\n</ul>\n</li>\n<li>ex) <code class=\"language-text\">Integer::parseInt</code></li>\n</ul>\n</li>\n<li>다양한 형식의 인스턴스 메서드 참조\n<ul>\n<li>비교\n<ul>\n<li>람다: <code class=\"language-text\">(arg0, rest) -> arg0.instanceMethod(rest)</code></li>\n<li>메서드 참조: <code class=\"language-text\">ClassName::instanceMethod(rest)</code>\n<ul>\n<li>단, ClassName은 arg0의 ClassName 형식</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ex) <code class=\"language-text\">String::length</code></li>\n</ul>\n</li>\n<li>기존 객체의 인스턴스 메서드 참조\n<ul>\n<li>비교\n<ul>\n<li>람다: <code class=\"language-text\">(args) -> expr.instanceMethod(args)</code></li>\n<li>메서드 참조: <code class=\"language-text\">expr::instanceMethod(args)</code></li>\n</ul>\n</li>\n<li>ex) Transaction이라는 클래스가 있을때, 생성된 expensiveTransaction\n<ul>\n<li><code class=\"language-text\">expensiveTransaction::getValue</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2>1.6 생성자 참조</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// # 1. Supplier: () -> Apple 시그니처의 생성자가 있다고 할 때,</span>\n<span class=\"token comment\">// ## 1-0. 람다 방식</span>\n<span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> c10 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Apple</span> a10 <span class=\"token operator\">=</span> c10<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ## 1-1. 참조 방식</span>\n<span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> c11 <span class=\"token operator\">=</span> <span class=\"token class-name\">Apple</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Apple</span> a11 <span class=\"token operator\">=</span> c11<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Supplier의 get을 통해 Apple 객체 생성이 가능하다.</span>\n\n<span class=\"token comment\">// # 2. Function: Apple(Integer weight) 시그니처의 생성자가 있다고 할 때,</span>\n<span class=\"token comment\">// ## 2-0. 람다 방식</span>\n<span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> c20 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Apple</span> a20 <span class=\"token operator\">=</span> c20<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">110</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ## 2-1. 참조 방식</span>\n<span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> c21 <span class=\"token operator\">=</span> <span class=\"token class-name\">Apple</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Apple</span> a21 <span class=\"token operator\">=</span> c21<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token number\">110</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// # 3. 사용 방법</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> weights <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> apples <span class=\"token operator\">=</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Apple</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> i<span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>2. 컬렉션</h1>\n<h2>2.1 상속 관계</h2>\n<ul>\n<li>Collection\n<ul>\n<li>List\n<ul>\n<li>LinkedList</li>\n<li>Stack</li>\n<li>Vector</li>\n<li>ArrayList</li>\n</ul>\n</li>\n<li>Set\n<ul>\n<li>HashSet</li>\n<li>SortedSet\n<ul>\n<li>TreeSet</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Map\n<ul>\n<li>Hashtable</li>\n<li>HashMap</li>\n<li>SortedMap\n<ul>\n<li>TreeMap</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>2.1.1 List</h3>\n<h4>2.1.1.1 Stack</h4>\n<ul>\n<li>메서드\n<ul>\n<li>push(): 데이터 삽입</li>\n<li>pop(): 데이터 추출</li>\n<li>peek(): 데이터 조회</li>\n<li>search(): Stack으로부터 데이터 검색</li>\n</ul>\n</li>\n</ul>\n<h4>2.1.1.2 Vector</h4>\n<ul>\n<li>동기화 보장</li>\n<li>지양</li>\n</ul>\n<h4>2.1.1.3 ArrayList</h4>\n<ul>\n<li>동기화 보장하지 않는다</li>\n<li>메서드\n<ul>\n<li>add(), get(), toArray(), contains(), size()</li>\n</ul>\n</li>\n</ul>\n<h3>2.1.2 Set</h3>\n<ul>\n<li>집합</li>\n<li>순서가 없다</li>\n<li>중복되지 않는다</li>\n</ul>\n<h4>2.1.2.1 HashSet</h4>\n<ul>\n<li>메서드\n<ul>\n<li>add(), next(), remove(), contains(), size()</li>\n</ul>\n</li>\n</ul>\n<h3>2.1.3 Map</h3>\n<ul>\n<li>key value 쌍의 리스트</li>\n<li>key는 중복되지 않는다</li>\n<li>메서드\n<ul>\n<li>put(), get()</li>\n</ul>\n</li>\n</ul>\n<h4>2.1.3.1 Hashtable</h4>\n<ul>\n<li>동기화 보장</li>\n<li>지양</li>\n</ul>\n<h4>2.1.3.2 HashMap</h4>\n<ul>\n<li>동기화 보장하지 않는다</li>\n</ul>\n<h2>2.2 Sorted</h2>\n<ul>\n<li>Set\n<ul>\n<li>SortedSet\n<ul>\n<li>TreeSet</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Map\n<ul>\n<li>SortedMap\n<ul>\n<li>TreeMap</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>2.2.1 Comparator</h3>\n<ul>\n<li>sort시, Comparator를 구현하여, 정렬의 방식을 지정할 수 있다.\n<ul>\n<li>오름차순, return 값의 양수가 후순위</li>\n</ul>\n</li>\n<li><code class=\"language-text\">compare(T o1, T o2)</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 제공되는 함수 인터페이스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> o2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 익명 클래스 방식</span>\n<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>classList<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ClassName</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassName</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassName</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 람다 방식</span>\n<span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>classList<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassName</span> o1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassName</span> o2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><a href=\"docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#method.summary\">Spec: <code class=\"language-text\">java.util > Interface Comparator&lt;T></code></a></li>\n</ul>\n<h2>2.3 Comparable</h2>\n<ul>\n<li>Comparable을 구현하여, 우위 방식을 구현할 수 있다.</li>\n<li><code class=\"language-text\">compareTo(T o)</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassName</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Type</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">private</span> score<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassName</span> another<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>score <span class=\"token operator\">-</span> another<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#method.summary\">Spec: <code class=\"language-text\">java.lang > Interface Comparable&lt;T></code></a></li>\n</ul>\n<h1>3. 스트림</h1>\n<ul>\n<li>데이터 처리 연산을 지원하는 소스에서 추출된 연속된 요소</li>\n<li>특징\n<ol>\n<li>연속된 요소</li>\n<li>소스</li>\n<li>데이터 처리 연산\n<ul>\n<li>컬렉션의 주제는 자료구조의 복잡성과 데이터</li>\n<li>스트림의 주제는 표현 계산식과 연산</li>\n</ul>\n</li>\n<li>파이프라이닝\n<ul>\n<li>laziness, short-circuiting 최적화를 얻을 수 있다.</li>\n</ul>\n</li>\n<li>내부 반복\n<ul>\n<li>반복자를 사용하는 컬렉션과 달리, 내부 반복을 지원한다.</li>\n<li>외부 반복에서는 병렬성을 스스로 관리해야한다.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>장점\n<ol>\n<li>선언형: 간결, 가독성 증대</li>\n<li>조립성: 유연성 증대\n<ul>\n<li>고수준 빌딩 블록으로 이루어져, 특정 스레딩 모델에 제한되지 않고, 자유롭게 사용 가능하다.</li>\n</ul>\n</li>\n<li>병렬화: 성능 향상\n<ul>\n<li>소프트웨어 공학적으로(내부적으로) 멀티코어 아키텍처를 최대한 활용 가능</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>종류\n<ul>\n<li>순차 <code class=\"language-text\">stream()</code></li>\n<li>병렬 <code class=\"language-text\">parallelStream()</code>\n<ul>\n<li>멀티스레드로 구현하지 않고, 병렬로 데이터 처리 가능</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>3.1 연산 함수</h2>\n<ul>\n<li>filter\n<ul>\n<li>return을 boolean 값으로, 해당 element 필터링 여부 결정</li>\n</ul>\n</li>\n<li>sorted\n<ul>\n<li>comparator를 받아, compare</li>\n</ul>\n</li>\n<li>map\n<ul>\n<li>return 값으로 element들을 대체</li>\n</ul>\n</li>\n<li>limit\n<ul>\n<li>반환 갯수 제한</li>\n</ul>\n</li>\n<li>collect\n<ul>\n<li>집계하여 새로운 자료구조로 반환</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// # stream 파이프라인 처리</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> lowCaloricDishesName <span class=\"token operator\">=</span> menu<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d<span class=\"token punctuation\">.</span><span class=\"token function\">getCalories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span> 400<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dish</span><span class=\"token operator\">::</span><span class=\"token function\">getCalories</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dish</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// # parallelStream 병렬 처리</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> lowCaloricDishesName <span class=\"token operator\">=</span> menu<span class=\"token punctuation\">.</span><span class=\"token function\">parallelStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>d<span class=\"token punctuation\">.</span><span class=\"token function\">getCalories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span> 400<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token function\">comparing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dish</span><span class=\"token operator\">::</span><span class=\"token function\">getCalories</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dish</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>4. Optional - Null 처리</h1>\n<ul>\n<li><code class=\"language-text\">java.util.Optional&lt;T></code></li>\n<li><code class=\"language-text\">null</code> 참조\n<ul>\n<li><code class=\"language-text\">null</code> 참조는 <code class=\"language-text\">NullPointerException</code>을 일으킨다.</li>\n<li><code class=\"language-text\">null</code>을 줄이기 위한 유효성 검사는 고려사항이 많다.</li>\n<li>에러의 근원. 시스템의 구멍.</li>\n<li>처리하기 위해, 코드를 어지럽힌다.</li>\n<li>아무 의미도 없다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">null</code> 참조 대신, <code class=\"language-text\">Optional</code> 클래스 활용을 지향한다.\n<ul>\n<li>js의 <code class=\"language-text\">?.</code>, 하스켈의 <code class=\"language-text\">Maybe</code>와 같은 역할</li>\n<li>cf) Option[T]</li>\n</ul>\n</li>\n</ul>\n<h2>4.1 작동 방식</h2>\n<p><img src=\"img_Java_Optional.png\" alt=\"Java_Optional_Car\"></p>\n<ul>\n<li><code class=\"language-text\">Optional</code> 객체는 값을 감싼다.</li>\n<li>값이 없다면, <code class=\"language-text\">Optional.empty</code> 메서드가 빈 <code class=\"language-text\">Optional</code>을 반환한다.\n<ul>\n<li><code class=\"language-text\">null</code>은 <code class=\"language-text\">NullPointerException</code>을 일으키지만, <code class=\"language-text\">Optional.empty()</code>는 <code class=\"language-text\">Optional</code> 객체이므로, 에러를 일으키지 않는다.</li>\n<li><code class=\"language-text\">null</code>의 경우, <strong>의도적으로 빈 값인지, 잘못된 값인지, 판단이 불가능</strong>하다.</li>\n<li><code class=\"language-text\">Optional</code>은 <strong>의도적으로 값이 없을 수 있다</strong>는 것을 명시적으로 보여준다.</li>\n</ul>\n</li>\n</ul>\n<h3>4.1.1 null 참조 처리 예</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 클래스 부분 생략</span>\n<span class=\"token comment\">// 처리 부분</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCarInsuranceName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Unknown\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">Car</span> car <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>car <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Unknown\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">Insurance</span> insurance <span class=\"token operator\">=</span> car<span class=\"token punctuation\">.</span><span class=\"token function\">getInsurance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>insurance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Unknown\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> insurance<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 만약, if문 중에 null 처리를 한곳이라도 안해준다면, 반드시 에러가 발생한다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>4.1.2 Optional 처리의 예</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 클래스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">></span></span> car<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Opional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> car<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Insurance</span><span class=\"token punctuation\">></span></span> insurance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Opional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Insurance</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getInsurance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> insurance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Insurance</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> insurance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 처리 부분 - null 참조 처리에 비해, 압도적으로 간결해졌다!</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCarInsuranceName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> person<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token operator\">::</span><span class=\"token function\">getInsurance</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Insurance</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>실제로, JPA는 단일 Entity를 반환시, Optional로 반환함으로써,</li>\n<li>조회된 Entity가 없을 수 있음을 명시한다!</li>\n</ul>\n<h2>4.2 Optional 랩 메서드</h2>\n<ul>\n<li>Optional.empty()</li>\n<li>Optional.of()</li>\n<li>Optional.ofNullable()</li>\n</ul>\n<h3>4.2.1 빈 Optional - Optional.empty</h3>\n<ul>\n<li>비어있음을 의도적으로 표현</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">></span></span> maybeCar <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>4.2.2 null이 아닌 Optional - Optional.of</h3>\n<ul>\n<li>null이 될 수 없음을 표현</li>\n<li>null이라면, NullPointerException을 발생</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">></span></span> maybeCar <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>4.2.3 null이 가능한 Optional - Optional.ofNullable</h3>\n<ul>\n<li>null이 가능</li>\n<li>null 이라면, 빈 Optional을 반환</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Car</span><span class=\"token punctuation\">></span></span> maybeCar <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>4.3 Optional 언랩 메서드</h2>\n<ul>\n<li>get</li>\n<li>orElse</li>\n<li>orElseGet</li>\n<li>orElseThrow</li>\n<li>ifPresent</li>\n<li>ifPresentOrElse</li>\n</ul>\n<h3>4.3.1 get</h3>\n<ul>\n<li>랩핑된 값을 반환</li>\n<li>값이 없다면, NoSuchElementException</li>\n<li>가장 간단하지만, 안전하지 않은 메서드</li>\n<li>Optional에 반드시 값이 있다고 가정하지 않는 이상 지양\n<ul>\n<li>null 처리와 다를바가 없다.</li>\n</ul>\n</li>\n</ul>\n<h3>4.3.2 orElse</h3>\n<ul>\n<li>orElse(T other)</li>\n<li>값이 없을 때, 기본값을 제공\n<ul>\n<li>other은 반환되지 않을 수 있을 뿐, 반드시 만들어 놓는다.</li>\n<li>other에 entity 사용시/고비용시, orElseGet을 사용한다.</li>\n</ul>\n</li>\n</ul>\n<h3>4.3.3 orElseGet</h3>\n<ul>\n<li><code class=\"language-text\">orElseGet(Supplier&lt;? extends T> other)</code></li>\n<li>orElse의 lazy 버전\n<ul>\n<li>값이 없을때만, Supplier를 실행\n<ul>\n<li>디폴트 메서드를 만드는 데 시간이 소모되거나(효율성),</li>\n<li>Optional이 비어있을 때만, 기본값을 생성해야 할 때 사용</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>4.3.4 orElseThrow</h3>\n<ul>\n<li><code class=\"language-text\">orElseThrow(Supplier&lt;? extends X> exceptionSupplier)</code></li>\n<li>Optional이 비어있다면, exceptionSupplier를 통해 예외를 발생시킨다\n<ul>\n<li>발생시킬 예외를 선택할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3>4.3.5 ifPresent</h3>\n<ul>\n<li><code class=\"language-text\">ifPresent(Consumer&lt;? super T> consumer)</code></li>\n<li>값이 존재할 때, consumer를 실행</li>\n<li>값이 없다면 아무일도 일어나지 않는다</li>\n</ul>\n<h3>4.3.6 ifPresentOrElse</h3>\n<ul>\n<li><code class=\"language-text\">ifPresentOrElse(Consumer&lt;? super T> consumer, Runnable emptyAction)</code></li>\n<li>Optional이 비었을 때, 받은 Runnable 인수를 실행한다.</li>\n</ul>\n<h2>4.4 Optional의 체이닝 처리 (스트림)</h2>\n<h3>4.4.1 map</h3>\n<ul>\n<li>Optional은 맵 사용 가능</li>\n<li>Optional은 요소 개수가 한 개 이하인 데이터 컬렉션</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Insurance</span><span class=\"token punctuation\">></span></span> maybeInsurance <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>insurance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> name <span class=\"token operator\">=</span> maybeInsurance<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Insurance</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>4.4.2 flatMap</h3>\n<ul>\n<li>Optional안의 Optional 구조의 경우, map의 중첩이 불가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> maybePerson <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> name <span class=\"token operator\">=</span> maybePerson<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">)</span>\n                                    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token operator\">::</span><span class=\"token function\">getInsurance</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 불가!</span>\n                                    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Insurance</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>flatMap은 함수를 인수로 받아, 다른 스트림을 반환하는 메서드이다.</li>\n<li>참조 체인을 하기 때문에, 가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getCarInsuranceName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> person<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token function\">getCar</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// person의 타입이 Optional&lt;Car>가 된다.</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span><span class=\"token operator\">::</span><span class=\"token function\">getInsurance</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Insurance</span><span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>순차적으로, person이 <code class=\"language-text\">flatMap</code>에 의해 <code class=\"language-text\">Optional&lt;Person></code>><code class=\"language-text\">Optional&lt;Car></code>><code class=\"language-text\">Optional&lt;Insurance></code> 로 변환되며 스트림이 진행된다.</li>\n<li>만일, 도중 비어있다면, <code class=\"language-text\">Optional.empty</code>를 이후부터 반환한다.</li>\n</ul>\n<h3>4.4.3 filter</h3>\n<ul>\n<li><code class=\"language-text\">filter(Predicate&lt;? extends T> predicate)</code></li>\n<li>값이 존재하고 Predicate에 알맞다면, Optional을 반환</li>\n<li>값이 존재하지 않거나 Predicate에 맞지 않다면, 빈 Optional 반환</li>\n</ul>\n<h3>4.4.4 stream</h3>\n<ul>\n<li>값이 존재하면, 존재하는 값만 포함하는 스트림을 반환</li>\n</ul>\n<h1>5. 시간</h1>\n<ul>\n<li>java.time 패키지를 사용한다.\n<ul>\n<li>불변 객체\n<ul>\n<li>스레드 안전성과 도메인 모델의 일관성을 유지하기 위해</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Java.util.Calendar와 Java.util.Date를 사용하지 않는다.\n<ul>\n<li>날짜와 시간 계산이 난해하다.</li>\n<li>불변 객체가 아니다.</li>\n</ul>\n</li>\n</ul>\n<h2>5.1 클래스</h2>\n<ul>\n<li>LocalDate</li>\n<li>LocalTime</li>\n<li>LocalDateTime</li>\n<li>Instant</li>\n<li>Duration</li>\n<li>Period</li>\n</ul>\n<h3>5.1.1 LocalDate</h3>\n<ul>\n<li>연도, 달, 요일 등을 반환</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LocalDate</span> date <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1993</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1993-04-09의 LocalDate 객체</span>\n\n<span class=\"token keyword\">int</span> year <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">//1993</span>\n<span class=\"token class-name\">Month</span> month <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">//APRILL</span>\n<span class=\"token keyword\">int</span> day <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getDayOfMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//9</span>\n<span class=\"token class-name\">DayOfWeek</span> dow <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getDayOfWeek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//FRIDAY</span>\n<span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">lengthOfMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//30</span>\n<span class=\"token keyword\">boolean</span> leap <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">//true (윤년)</span>\n\n<span class=\"token class-name\">LocalDate</span> today <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//오늘 데이터의 LocalDate 객체</span></code></pre></div>\n<h3>5.1.2 LocalTime</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">LocalTime</span> time <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 13:45:20의 LocalTime 객체</span>\n<span class=\"token keyword\">int</span> hour <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">getHour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// 13</span>\n<span class=\"token keyword\">int</span> minute <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">getMinute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 45</span>\n<span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">getSecond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 20</span></code></pre></div>\n<h3>5.1.3 LocalDateTime</h3>\n<ul>\n<li>LocalDate + LocalTime</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 2017-09-21T13:45:20</span>\n<span class=\"token class-name\">LocalDateTime</span> dt1 <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2017</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Month</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SEPTEMBER</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token class-name\">LocalDateTime</span> dt2 <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">LocalDateTime</span> dt3 <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">atTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">LocalDateTime</span> dt4 <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">atTime</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">LocalDateTime</span> dt5 <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">atDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">LocalDate</span> date <span class=\"token operator\">=</span> dt1<span class=\"token punctuation\">.</span><span class=\"token function\">toLocalDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">LocalTime</span> time <span class=\"token operator\">=</span> dt1<span class=\"token punctuation\">.</span><span class=\"token function\">toLocalTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>5.1.4 Instant</h3>\n<ul>\n<li>java.time.Instant</li>\n<li>기계 날짜 시간(Unix epoch time 1970-01-01T00:00:00UTC 기준의 초)</li>\n<li>나노초(10억분의 1)의 정밀도</li>\n<li>ofEpochSecond</li>\n</ul>\n<h3>5.1.5 Duration, Period</h3>\n<ul>\n<li>두 시간 객체 사이의 지속시간 클래스</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//</span>\n<span class=\"token class-name\">Duration</span> d1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span>time1<span class=\"token punctuation\">,</span> time2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Duration</span> d2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span>dateTime1<span class=\"token punctuation\">,</span> dateTime2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Duration</span> d3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span>instant1<span class=\"token punctuation\">,</span> instant2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Duration</span> d3 <span class=\"token operator\">=</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2017</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2017</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token class-name\">Duration</span> d4 <span class=\"token operator\">=</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofMinutes</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Duration</span> d4 <span class=\"token operator\">=</span> <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ChronoUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token class-name\">Period</span> tenDays <span class=\"token operator\">=</span> <span class=\"token class-name\">Period</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Period</span> threeWeeks <span class=\"token operator\">=</span> <span class=\"token class-name\">Period</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofWeeks</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Period</span> twoYearsSixMonthsOneDay <span class=\"token operator\">=</span> <span class=\"token class-name\">Period</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>5.2 공통 메서드</h2>\n<ul>\n<li>정적\n<ol>\n<li>now\n<ul>\n<li>시스템 시계로 Temporal 객체 생성</li>\n</ul>\n</li>\n<li>of\n<ul>\n<li>인자로 Temporal 객체 생성</li>\n</ul>\n</li>\n<li>from\n<ul>\n<li>Temporal 인자로 클래스의 인스턴스 생성</li>\n</ul>\n</li>\n<li>parse\n<ul>\n<li>문자열을 파싱하여 Temporal 객체 생성</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>비정적\n<ol>\n<li>get\n<ul>\n<li>Temporal 객체 상태</li>\n</ul>\n</li>\n<li>atOffset\n<ul>\n<li>시간대 오프셋과 Temporal 객체를 합친다</li>\n</ul>\n</li>\n<li>atZone\n<ul>\n<li>지역 시간대 오프셋과 Temporal 객체를 합친다</li>\n</ul>\n</li>\n<li>format\n<ul>\n<li>지정 포맷을 이용하여 Temporal 객체를 문자열로 변환</li>\n<li>Instant 미지원</li>\n</ul>\n</li>\n<li>plus\n<ul>\n<li>특정 시간을 더한 Temporal 객체를 깊은 복사 생성</li>\n</ul>\n</li>\n<li>minus\n<ul>\n<li>특정 시간을 뺀 Temporal 객체를 깊은 복사 생성</li>\n</ul>\n</li>\n<li>with\n<ul>\n<li>일부 상태를 변경한 Temporal 객체를 깊은 복사 생성</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>","frontmatter":{"title":"Java 문법","date":"December 30, 2023","description":"Java 문법 정리","category":"java"}},"previous":null,"next":{"fields":{"slug":"/java/basic_java/0_목차/"},"frontmatter":{"title":"0. 목차","category":"java > basic java"}}},"pageContext":{"id":"8d862543-39d1-5268-b958-be39a53a0a04","previousPostId":null,"nextPostId":"605a21ec-7917-516d-8a8c-0c37338d84e6"}},"staticQueryHashes":["1408108323","3764592887"],"slicesMap":{}}