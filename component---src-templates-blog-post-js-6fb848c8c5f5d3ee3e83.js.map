{"version":3,"file":"component---src-templates-blog-post-js-6fb848c8c5f5d3ee3e83.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/button/scroll/scrollButtonStyle.js","webpack://gatsby-starter-blog/./src/components/button/scroll/scrollToBottomButton.js","webpack://gatsby-starter-blog/./src/components/button/scroll/scrollToTopButton.js","webpack://gatsby-starter-blog/./src/components/button/buttonStyle.js","webpack://gatsby-starter-blog/./src/components/button/redirectButton.js","webpack://gatsby-starter-blog/./src/components/button/homeButton.js","webpack://gatsby-starter-blog/./src/components/button/scroll/allScrollButtonContainer.js","webpack://gatsby-starter-blog/./src/components/pagination/postPagination.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["const scrollButtonStyle = {\n  height: '40px',\n  padding: '10px 20px',\n  fontSize: '16px',\n  backgroundColor: '#cccccc',\n  color: '#fff',\n  border: 'none',\n  borderRadius: '5px',\n  cursor: 'pointer',\n  textAlign: 'center',\n  textDecoration: 'none',\n};\n\nexport default scrollButtonStyle;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport defaultScrollButtonStyle from './scrollButtonStyle';\n\nconst ScrollToBottomButton = ({ style }) => {\n  const [showButton, setShowButton] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY < document.documentElement.scrollHeight - window.innerHeight - 300) {\n        setShowButton(true);\n      } else {\n        setShowButton(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  const scrollToBottom = () => {\n    window.scrollTo({ top: document.documentElement.scrollHeight, behavior: 'smooth' });\n  };\n\n  return (\n    showButton && (\n        <button onClick={scrollToBottom} style={style}>\n            ↓\n        </button>\n    )\n  );\n};\n\nScrollToBottomButton.propTypes = {\n  style: PropTypes.object,\n};\n\nScrollToBottomButton.defaultProps = {\n  style: defaultScrollButtonStyle,\n};\n\nexport default ScrollToBottomButton;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport defaultScrollButtonStyle from './scrollButtonStyle';\n\n\nconst ScrollToTopButton = ({style}) => {\n  const [showButton, setShowButton] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY > 300) {\n        setShowButton(true);\n      } else {\n        setShowButton(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  return (\n    showButton && (\n        <button onClick={scrollToTop} style={style}>\n            ↑\n        </button>\n    )\n  );\n};\n\nScrollToTopButton.propTypes = {\n  style: PropTypes.object,\n};\n\nScrollToTopButton.defaultProps = {\n  style: defaultScrollButtonStyle,\n};\n\nexport default ScrollToTopButton;\n","const buttonStyle = {\n  padding: '10px 20px',\n  fontSize: '16px',\n  backgroundColor: '#007bff',\n  color: '#fff',\n  border: 'none',\n  borderRadius: '5px',\n  textDecoration: 'none',\n  textAlign: 'center',\n  cursor: 'pointer',\n};\n\nexport default buttonStyle;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport defaultButtonStyle from './buttonStyle';\n\nconst RedirectButton = ({ style, url, contents}) => {\n  return (\n    <Link to={url} style={style} rel=\"prev\">\n      {contents}\n    </Link>\n  );\n};\n\nRedirectButton.propTypes = {\n  style: PropTypes.object,\n  url: PropTypes.string,\n  contents: PropTypes.string,\n};\n\nRedirectButton.defaultProps = {\n  style: defaultButtonStyle,\n};\n\nexport default RedirectButton;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport buttonStyle from './buttonStyle';\nimport RedirectButton from './redirectButton';\n\n\n\nconst HomeButton = ({ style }) => {\n  return (\n    <RedirectButton style={style} url=\"/\" contents=\"🏠\" />\n  );\n};\n\nHomeButton.propTypes = {\n  style: PropTypes.object,\n};\n\nHomeButton.defaultProps = {\n  style: buttonStyle,\n};\n\nexport default HomeButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport scrollButtonStyle from './scrollButtonStyle';\nimport ScrollToTopButton from './scrollToTopButton';\nimport ScrollToBottomButton from './scrollToBottomButton';\nimport HomeButtons from '../homeButton';\nimport RedirectButton from '../redirectButton';\n\nconst AllScrollButtonContainer = ({ previousLink, nextLink }) => {\n  return (\n    <div style={scrollButtonsContainerStyle}>\n      {previousLink && <RedirectButton style={scrollButtonStyle} url={previousLink} contents={\"←\"}/>}\n      <ScrollToTopButton style={scrollButtonStyle} />\n      <HomeButtons style={scrollButtonStyle} />\n      <ScrollToBottomButton style={scrollButtonStyle} />\n      {nextLink && <RedirectButton style={scrollButtonStyle} url={nextLink} contents={\"→\"}/>}\n    </div>\n  );\n};\n\nconst scrollButtonsContainerStyle = {\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'center',\n  position: 'fixed',\n  bottom: '20px',\n  right: '20px',\n};\n\nAllScrollButtonContainer.propTypes = {\n  previousLink: PropTypes.string,\n  nextLink: PropTypes.string,\n};\n\nexport default AllScrollButtonContainer;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport './postPagination.css' // postPagination.css 파일 임포트\n\nconst PostPagination = ({ postCategories }) => {\n  return (\n    <nav className=\"blog-post-nav\">\n      <div className=\"categories-container\">\n        categories: \n        <ul>\n          <li className=\"post-categories\">\n            {postCategories.map((category, index) => (\n              <React.Fragment key={category}>\n                <Link to={`/categories/${category}/`}>{category}</Link>\n                {index < postCategories.length - 1 && \", \"}\n              </React.Fragment>\n            ))}\n          </li>\n        </ul>\n      </div>\n    </nav>\n  )\n}\n\nPostPagination.propTypes = {\n  postCategories: PropTypes.arrayOf(PropTypes.string).isRequired,\n  previous: PropTypes.shape({\n    fields: PropTypes.shape({\n      slug: PropTypes.string,\n    }),\n    frontmatter: PropTypes.shape({\n      title: PropTypes.string,\n      category: PropTypes.arrayOf(PropTypes.string),\n    }),\n  }),\n  next: PropTypes.shape({\n    fields: PropTypes.shape({\n      slug: PropTypes.string,\n    }),\n    frontmatter: PropTypes.shape({\n      title: PropTypes.string,\n      category: PropTypes.arrayOf(PropTypes.string),\n    }),\n  }),\n}\n\nexport default PostPagination","import * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql, Link } from \"gatsby\"\n\nimport Layout from \"../components/layout/layout\"\nimport Seo from \"../components/seo\"\nimport ScrollButtonContainer from \"../components/button/scroll/allScrollButtonContainer\"\nimport Pagination from \"../components/pagination/postPagination\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n  const postCategories = post.frontmatter?.category || []\n  const postTitle = post.frontmatter.title\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <p>\n            {postCategories.map((category, index) => (\n              <React.Fragment key={category}>\n                <Link to={`/categories/${category}/`}>{category}</Link>\n                {index < postCategories.length - 1 && \", \"}\n              </React.Fragment>\n            ))}\n          </p>\n          <h1 itemProp=\"headline\">{postTitle}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n      </article>\n      <Pagination postCategories={postCategories} />\n      <ScrollButtonContainer previousLink={previous?.fields.slug} nextLink={next?.fields.slug}/>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data, location }) => {\n  const { site, markdownRemark: post } = data;\n  let imageUrl = null;\n  \n  if (post.frontmatter.featuredImage?.childImageSharp?.gatsbyImageData) {\n    const imageData = post.frontmatter.featuredImage.childImageSharp.gatsbyImageData;\n    imageUrl = `${site.siteMetadata.siteUrl}${imageData.images.fallback.src}`;\n  } \n  else if (post.images && post.images.length > 0) {\n    const imageData = post.images[0].childImageSharp.gatsbyImageData;\n    imageUrl = `${site.siteMetadata.siteUrl}${imageData.images.fallback.src}`;\n  }\n  else {\n    const imgRegex = /<img[^>]+src=[\"']?([^\"'\\s>]+)[\"']?[^>]*>/g;\n    const match = imgRegex.exec(post.html);\n    if (match && match[1]) {\n      imageUrl = match[1];\n      if (!imageUrl.startsWith('http')) {\n        // 절대 경로인지 확인 (슬래시로 시작하는지)\n        imageUrl = imageUrl.startsWith('/') \n          ? `${site.siteMetadata.siteUrl}${imageUrl}`\n          : `${site.siteMetadata.siteUrl}/${imageUrl}`;\n      }\n    }\n  }\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n      location={location}\n      image={imageUrl}\n      meta={[\n        {\n          name: \"article:published_time\",\n          content: post.frontmatter.date,\n        },\n        {\n          name: \"article:tag\",\n          content: Array.isArray(post.frontmatter.tags) ? post.frontmatter.tags.join(\", \") : (post.frontmatter.tags || \"\"),\n        },\n      ]}\n    />\n  )\n}\n\nBlogPostTemplate.propTypes = {\n  data: PropTypes.shape({\n    previous: PropTypes.shape({\n      fields: PropTypes.shape({\n        slug: PropTypes.string,\n      }),\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        category: PropTypes.arrayOf(PropTypes.string),\n      }),\n    }),\n    next: PropTypes.shape({\n      fields: PropTypes.shape({\n        slug: PropTypes.string,\n      }),\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        category: PropTypes.arrayOf(PropTypes.string),\n      }),\n    }),\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string,\n        siteUrl: PropTypes.string,\n      }),\n    }),\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        date: PropTypes.string,\n        category: PropTypes.arrayOf(PropTypes.string),\n        description: PropTypes.string,\n        featuredImage: PropTypes.object,\n      }),\n      html: PropTypes.string,\n      images: PropTypes.array,\n    }),\n  }).isRequired,\n  location: PropTypes.object.isRequired,\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n        siteUrl\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      images {\n        childImageSharp {\n          gatsbyImageData\n        }\n      }\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        category\n        featuredImage {\n          childImageSharp {\n            gatsbyImageData\n          }\n        }\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        category\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        category\n      }\n    }\n  }\n`\n"],"names":["height","padding","fontSize","backgroundColor","color","border","borderRadius","cursor","textAlign","textDecoration","ScrollToBottomButton","style","showButton","setShowButton","useState","useEffect","handleScroll","window","scrollY","document","documentElement","scrollHeight","innerHeight","addEventListener","removeEventListener","onClick","scrollTo","top","behavior","defaultProps","defaultScrollButtonStyle","ScrollToTopButton","RedirectButton","url","contents","Link","to","rel","defaultButtonStyle","HomeButton","buttonStyle","scrollButtonsContainerStyle","display","flexDirection","alignItems","position","bottom","right","previousLink","nextLink","scrollButtonStyle","postCategories","className","map","category","index","key","length","Head","data","location","site","markdownRemark","post","imageUrl","frontmatter","featuredImage","childImageSharp","gatsbyImageData","imageData","siteMetadata","siteUrl","images","fallback","src","match","exec","html","startsWith","title","description","excerpt","image","meta","name","content","date","Array","isArray","tags","join","previous","next","siteTitle","postTitle","itemScope","itemType","itemProp","dangerouslySetInnerHTML","__html","fields","slug"],"sourceRoot":""}