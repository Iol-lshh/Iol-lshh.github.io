{"version":3,"file":"component---src-templates-blog-post-js-0d5afb839d8dc3a1dd4e.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/button/scroll/scrollButtonStyle.js","webpack://gatsby-starter-blog/./src/components/button/scroll/scrollToBottomButton.js","webpack://gatsby-starter-blog/./src/components/button/scroll/scrollToTopButton.js","webpack://gatsby-starter-blog/./src/components/navi/sidebar.js","webpack://gatsby-starter-blog/./src/components/bio/bio.js","webpack://gatsby-starter-blog/./src/components/layout/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/components/button/buttonStyle.js","webpack://gatsby-starter-blog/./src/components/button/redirectButton.js","webpack://gatsby-starter-blog/./src/components/button/homeButton.js","webpack://gatsby-starter-blog/./src/components/button/scroll/allScrollButtonContainer.js","webpack://gatsby-starter-blog/./src/components/pagination/postPagination.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["const scrollButtonStyle = {\n  height: '40px',\n  padding: '10px 20px',\n  fontSize: '16px',\n  backgroundColor: '#cccccc',\n  color: '#fff',\n  border: 'none',\n  borderRadius: '5px',\n  cursor: 'pointer',\n  textAlign: 'center',\n  textDecoration: 'none',\n};\n\nexport default scrollButtonStyle;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport defaultScrollButtonStyle from './scrollButtonStyle';\n\nconst ScrollToBottomButton = ({ style }) => {\n  const [showButton, setShowButton] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY < document.documentElement.scrollHeight - window.innerHeight - 300) {\n        setShowButton(true);\n      } else {\n        setShowButton(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  const scrollToBottom = () => {\n    window.scrollTo({ top: document.documentElement.scrollHeight, behavior: 'smooth' });\n  };\n\n  return (\n    showButton && (\n        <button onClick={scrollToBottom} style={style}>\n            ↓\n        </button>\n    )\n  );\n};\n\nScrollToBottomButton.propTypes = {\n  style: PropTypes.object,\n};\n\nScrollToBottomButton.defaultProps = {\n  style: defaultScrollButtonStyle,\n};\n\nexport default ScrollToBottomButton;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport defaultScrollButtonStyle from './scrollButtonStyle';\n\n\nconst ScrollToTopButton = ({style}) => {\n  const [showButton, setShowButton] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY > 300) {\n        setShowButton(true);\n      } else {\n        setShowButton(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  return (\n    showButton && (\n        <button onClick={scrollToTop} style={style}>\n            ↑\n        </button>\n    )\n  );\n};\n\nScrollToTopButton.propTypes = {\n  style: PropTypes.object,\n};\n\nScrollToTopButton.defaultProps = {\n  style: defaultScrollButtonStyle,\n};\n\nexport default ScrollToTopButton;\n","import React, { useState } from 'react';\nimport { Link, graphql, useStaticQuery } from 'gatsby';\nimport './sidebar.css';\n\nconst Sidebar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark {\n        group(field: { frontmatter: { category: SELECT } }) {\n          fieldValue\n        }\n      }\n    }\n  `);\n\n  const categories = data.allMarkdownRemark.group.map(group => group.fieldValue);\n\n  const toggleMenu = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className=\"hamburger-menu\">\n      <button onClick={toggleMenu} className={`hamburger-button ${isOpen ? 'shifted' : ''}`}>\n        {isOpen ? (\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n            <line x1=\"4\" y1=\"4\" x2=\"20\" y2=\"20\" stroke=\"white\" strokeWidth=\"2\" />\n            <line x1=\"20\" y1=\"4\" x2=\"4\" y2=\"20\" stroke=\"white\" strokeWidth=\"2\" />\n          </svg>\n        ) : (\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n            <line x1=\"4\" y1=\"12\" x2=\"20\" y2=\"12\" stroke=\"white\" strokeWidth=\"2\" />\n            <line x1=\"4\" y1=\"6\" x2=\"20\" y2=\"6\" stroke=\"white\" strokeWidth=\"2\" />\n            <line x1=\"4\" y1=\"18\" x2=\"20\" y2=\"18\" stroke=\"white\" strokeWidth=\"2\" />\n          </svg>\n        )}\n      </button>\n      <nav className={`sidebar ${isOpen ? 'open' : ''}`}>\n        <ul>\n          <Link to={`/`}>전체 리스트</Link>\n          {categories.map(category => (\n            <li key={category}>\n              <Link to={`/categories/${category}/`}>{category}</Link>\n            </li>\n          ))}\n        </ul>\n      </nav>\n      <div className={`content ${isOpen ? 'shifted' : ''}`}>\n        {/* 여기에 페이지 내용을 추가합니다 */}\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;","import * as React from \"react\"\nimport { Link, useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport \"./bio.css\" // bio.css 파일 임포트\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            instagram\n            github\n            linkedin\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n  const {instagram, github, linkedin} = social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"https://avatars.githubusercontent.com/u/37289223?v=4\"\n        width={75}\n        height={75}\n        quality={75}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          <strong><Link to=\"/\">{author.name}</Link></strong>\n          <br />\n          {author?.summary || null}\n          <br />\n          <a href={`https://github.com/${github}`}>\n            <img src=\"https://img.shields.io/badge/github-181717?style=for-the-badge&logo=github&logoColor=white\" alt=\"GitHub badge\" />\n          </a>\n          {` `}\n          <a href={`https://www.linkedin.com/${linkedin}`}>\n            <img src=\"https://img.shields.io/badge/linkedin-007CC3?style=for-the-badge&logo=linkedin&logoColor=white\" alt=\"LinkedIn badge\" />\n          </a>\n          {` `}\n          <a href={`https://www.instagram.com/${instagram}`}>\n            <img src=\"https://img.shields.io/badge/instagram-FF0069?style=for-the-badge&logo=instagram&logoColor=white\" alt=\"Instagram badge\" />\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport Sidebar from \"../navi/sidebar\"\nimport Bio from \"../bio/bio\"\nimport \"./layout.css\" \n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location ? location.pathname === rootPath : false\n  let header\n\n  header = (\n    <h1 className=\"main-heading\">\n      <Link to=\"/\">{title}</Link>\n    </h1>\n  )\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <Sidebar/>\n      <header className=\"global-header\">\n        <div className=\"header-container\">\n          {header}\n        </div>\n      </header>\n      <main>{children}</main>\n      <footer>\n        <Bio />\n      </footer>\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string,\n  }),\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ title, description, image, lang = \"kr\", meta = [], children, location }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaTitle = title || `The Engineer, Aiming Fine.`\n  const metaDescription = description || site.siteMetadata.description\n  const metaImage = image || `https://avatars.githubusercontent.com/u/37289223?v=4`\n  const canonical = `${site.siteMetadata.siteUrl}${location ? location.pathname : \"\"}`\n\n  // 구조화된 데이터 설정\n  const schemaOrgWebPage = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"WebPage\",\n    url: canonical,\n    headline: metaTitle,\n    inLanguage: lang,\n    mainEntityOfPage: canonical,\n    description: metaDescription,\n    name: metaTitle,\n    author: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"Lshh\",\n    },\n    copyrightHolder: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"Lshh\",\n    },\n    copyrightYear: new Date().getFullYear(),\n    creator: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"Lshh\",\n    },\n    publisher: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"Lshh\",\n    },\n    image: {\n      \"@type\": \"ImageObject\",\n      url: metaImage,\n    },\n    datePublished: new Date().toISOString(),\n  }\n\n  // 블로그 포스트에 대한 구조화된 데이터\n  const schemaArticle = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BlogPosting\",\n    url: canonical,\n    name: metaTitle,\n    headline: metaTitle,\n    image: {\n      \"@type\": \"ImageObject\",\n      url: metaImage,\n    },\n    description: metaDescription,\n    author: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"lshh\",\n    },\n    publisher: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"lshh\",\n      logo: {\n        \"@type\": \"ImageObject\",\n        url: metaImage,\n      },\n    },\n    mainEntityOfPage: canonical,\n    datePublished: new Date().toISOString(),\n  }\n\n  return (\n    <Helmet\n      htmlAttributes={{ lang }}\n      title={metaTitle}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      link={[\n        {\n          rel: \"canonical\",\n          href: `${site.siteMetadata.siteUrl}${location ? location.pathname : \"\"}`\n        }\n      ]}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: `robots`,\n          content: `index, follow`\n        },\n        {\n          property: `og:title`,\n          content: metaTitle,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          property: `og:url`,\n          content: canonical,\n        },\n        {\n          property: `og:image`,\n          content: metaImage,\n        },\n        {\n          property: `og:image:alt`,\n          content: metaTitle,\n        },\n        {\n          property: `og:site_name`,\n          content: site.siteMetadata.title,\n        },\n      ].concat(meta)}\n    >\n      {children}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgWebPage)}\n      </script>\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaArticle)}\n      </script>\n    </Helmet>\n  )\n}\nSEO.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  children: PropTypes.node,\n  location: PropTypes.object,\n}\n\nexport default SEO\n","const buttonStyle = {\n  padding: '10px 20px',\n  fontSize: '16px',\n  backgroundColor: '#007bff',\n  color: '#fff',\n  border: 'none',\n  borderRadius: '5px',\n  textDecoration: 'none',\n  textAlign: 'center',\n  cursor: 'pointer',\n};\n\nexport default buttonStyle;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport defaultButtonStyle from './buttonStyle';\n\nconst RedirectButton = ({ style, url, contents}) => {\n  return (\n    <Link to={url} style={style} rel=\"prev\">\n      {contents}\n    </Link>\n  );\n};\n\nRedirectButton.propTypes = {\n  style: PropTypes.object,\n  url: PropTypes.string,\n  contents: PropTypes.string,\n};\n\nRedirectButton.defaultProps = {\n  style: defaultButtonStyle,\n};\n\nexport default RedirectButton;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport buttonStyle from './buttonStyle';\nimport RedirectButton from './redirectButton';\n\n\n\nconst HomeButton = ({ style }) => {\n  return (\n    <RedirectButton style={style} url=\"/\" contents=\"🏠\" />\n  );\n};\n\nHomeButton.propTypes = {\n  style: PropTypes.object,\n};\n\nHomeButton.defaultProps = {\n  style: buttonStyle,\n};\n\nexport default HomeButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport scrollButtonStyle from './scrollButtonStyle';\nimport ScrollToTopButton from './scrollToTopButton';\nimport ScrollToBottomButton from './scrollToBottomButton';\nimport HomeButtons from '../homeButton';\nimport RedirectButton from '../redirectButton';\n\nconst AllScrollButtonContainer = ({ previousLink, nextLink }) => {\n  return (\n    <div style={scrollButtonsContainerStyle}>\n      {previousLink && <RedirectButton style={scrollButtonStyle} url={previousLink} contents={\"←\"}/>}\n      <ScrollToTopButton style={scrollButtonStyle} />\n      <HomeButtons style={scrollButtonStyle} />\n      <ScrollToBottomButton style={scrollButtonStyle} />\n      {nextLink && <RedirectButton style={scrollButtonStyle} url={nextLink} contents={\"→\"}/>}\n    </div>\n  );\n};\n\nconst scrollButtonsContainerStyle = {\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'center',\n  position: 'fixed',\n  bottom: '20px',\n  right: '20px',\n};\n\nAllScrollButtonContainer.propTypes = {\n  previousLink: PropTypes.string,\n  nextLink: PropTypes.string,\n};\n\nexport default AllScrollButtonContainer;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport './postPagination.css' // postPagination.css 파일 임포트\n\nconst PostPagination = ({ postCategories }) => {\n  return (\n    <nav className=\"blog-post-nav\">\n      <div className=\"categories-container\">\n        categories: \n        <ul>\n          <li className=\"post-categories\">\n            {postCategories.map((category, index) => (\n              <React.Fragment key={category}>\n                <Link to={`/categories/${category}/`}>{category}</Link>\n                {index < postCategories.length - 1 && \", \"}\n              </React.Fragment>\n            ))}\n          </li>\n        </ul>\n      </div>\n    </nav>\n  )\n}\n\nPostPagination.propTypes = {\n  postCategories: PropTypes.arrayOf(PropTypes.string).isRequired,\n  previous: PropTypes.shape({\n    fields: PropTypes.shape({\n      slug: PropTypes.string,\n    }),\n    frontmatter: PropTypes.shape({\n      title: PropTypes.string,\n      category: PropTypes.arrayOf(PropTypes.string),\n    }),\n  }),\n  next: PropTypes.shape({\n    fields: PropTypes.shape({\n      slug: PropTypes.string,\n    }),\n    frontmatter: PropTypes.shape({\n      title: PropTypes.string,\n      category: PropTypes.arrayOf(PropTypes.string),\n    }),\n  }),\n}\n\nexport default PostPagination","import * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql, Link } from \"gatsby\"\n\nimport Layout from \"../components/layout/layout\"\nimport Seo from \"../components/seo\"\nimport ScrollButtonContainer from \"../components/button/scroll/allScrollButtonContainer\"\nimport Pagination from \"../components/pagination/postPagination\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n  const postCategories = post.frontmatter?.category || []\n  const postTitle = post.frontmatter.title\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <p>\n            {postCategories.map((category, index) => (\n              <React.Fragment key={category}>\n                <Link to={`/categories/${category}/`}>{category}</Link>\n                {index < postCategories.length - 1 && \", \"}\n              </React.Fragment>\n            ))}\n          </p>\n          <h1 itemProp=\"headline\">{postTitle}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n      </article>\n      <Pagination postCategories={postCategories} />\n      <ScrollButtonContainer previousLink={previous?.fields.slug} nextLink={next?.fields.slug}/>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data, location }) => {\n  const { site, markdownRemark: post } = data;\n  let imageUrl = null;\n  \n  if (post.frontmatter.featuredImage?.childImageSharp?.gatsbyImageData) {\n    const imageData = post.frontmatter.featuredImage.childImageSharp.gatsbyImageData;\n    imageUrl = `${site.siteMetadata.siteUrl}${imageData.images.fallback.src}`;\n  } \n  else if (post.images && post.images.length > 0) {\n    const imageData = post.images[0].childImageSharp.gatsbyImageData;\n    imageUrl = `${site.siteMetadata.siteUrl}${imageData.images.fallback.src}`;\n  }\n  else {\n    const imgRegex = /<img[^>]+src=[\"']?([^\"'\\s>]+)[\"']?[^>]*>/g;\n    const match = imgRegex.exec(post.html);\n    if (match && match[1]) {\n      imageUrl = match[1];\n      if (!imageUrl.startsWith('http')) {\n        // 절대 경로인지 확인 (슬래시로 시작하는지)\n        imageUrl = imageUrl.startsWith('/') \n          ? `${site.siteMetadata.siteUrl}${imageUrl}`\n          : `${site.siteMetadata.siteUrl}/${imageUrl}`;\n      }\n    }\n  }\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n      location={location}\n      image={imageUrl}\n      meta={[\n        {\n          name: \"article:published_time\",\n          content: post.frontmatter.date,\n        },\n        {\n          name: \"article:tag\",\n          content: Array.isArray(post.frontmatter.tags) ? post.frontmatter.tags.join(\", \") : (post.frontmatter.tags || \"\"),\n        },\n      ]}\n    />\n  )\n}\n\nBlogPostTemplate.propTypes = {\n  data: PropTypes.shape({\n    previous: PropTypes.shape({\n      fields: PropTypes.shape({\n        slug: PropTypes.string,\n      }),\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        category: PropTypes.arrayOf(PropTypes.string),\n      }),\n    }),\n    next: PropTypes.shape({\n      fields: PropTypes.shape({\n        slug: PropTypes.string,\n      }),\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        category: PropTypes.arrayOf(PropTypes.string),\n      }),\n    }),\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string,\n        siteUrl: PropTypes.string,\n      }),\n    }),\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.shape({\n        title: PropTypes.string,\n        date: PropTypes.string,\n        category: PropTypes.arrayOf(PropTypes.string),\n        description: PropTypes.string,\n        featuredImage: PropTypes.object,\n      }),\n      html: PropTypes.string,\n      images: PropTypes.array,\n    }),\n  }).isRequired,\n  location: PropTypes.object.isRequired,\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n        siteUrl\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      images {\n        childImageSharp {\n          gatsbyImageData\n        }\n      }\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        category\n        featuredImage {\n          childImageSharp {\n            gatsbyImageData\n          }\n        }\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        category\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        category\n      }\n    }\n  }\n`\n"],"names":["height","padding","fontSize","backgroundColor","color","border","borderRadius","cursor","textAlign","textDecoration","ScrollToBottomButton","style","showButton","setShowButton","useState","useEffect","handleScroll","window","scrollY","document","documentElement","scrollHeight","innerHeight","addEventListener","removeEventListener","onClick","scrollTo","top","behavior","defaultProps","defaultScrollButtonStyle","ScrollToTopButton","isOpen","setIsOpen","categories","useStaticQuery","allMarkdownRemark","group","map","fieldValue","className","width","viewBox","x1","y1","x2","y2","stroke","strokeWidth","Link","to","category","key","data","author","site","siteMetadata","social","instagram","github","linkedin","S","layout","formats","src","quality","alt","name","summary","href","location","title","children","isRootPath","pathname","header","description","image","lang","meta","metaTitle","metaDescription","metaImage","canonical","siteUrl","schemaOrgWebPage","url","headline","inLanguage","mainEntityOfPage","copyrightHolder","copyrightYear","Date","getFullYear","creator","publisher","datePublished","toISOString","schemaArticle","logo","htmlAttributes","titleTemplate","link","rel","content","property","concat","type","JSON","stringify","RedirectButton","contents","defaultButtonStyle","HomeButton","buttonStyle","scrollButtonsContainerStyle","display","flexDirection","alignItems","position","bottom","right","previousLink","nextLink","scrollButtonStyle","postCategories","index","length","Head","markdownRemark","post","imageUrl","frontmatter","featuredImage","childImageSharp","gatsbyImageData","imageData","images","fallback","match","exec","html","startsWith","excerpt","date","Array","isArray","tags","join","previous","next","siteTitle","postTitle","itemScope","itemType","itemProp","dangerouslySetInnerHTML","__html","fields","slug"],"sourceRoot":""}