{"version":3,"file":"component---src-pages-index-js-bf1af52435d8e7c665e0.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/article/articlePagination.js","webpack://gatsby-starter-blog/./src/components/article/articleList.js","webpack://gatsby-starter-blog/./src/components/button/scroll/scrollButtonStyle.js","webpack://gatsby-starter-blog/./src/components/button/scroll/scrollToBottomButton.js","webpack://gatsby-starter-blog/./src/components/button/scroll/scrollToTopButton.js","webpack://gatsby-starter-blog/./src/components/button/scroll/updownScrollButtonContainer.js","webpack://gatsby-starter-blog/./src/components/navi/sidebar.js","webpack://gatsby-starter-blog/./src/components/bio/bio.js","webpack://gatsby-starter-blog/./src/components/layout/layout.js","webpack://gatsby-starter-blog/./src/components/search/search.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport './articlePagination.css' // CSS 파일을 임포트\n\nconst ArticlePagination = ({ posts, postsPerPage, setCurrentPosts }) => {\n  const [currentPage, setCurrentPage] = useState(1)\n  const totalPages = Math.ceil(posts.length / postsPerPage)\n\n  useEffect(() => {\n    const indexOfLastPost = currentPage * postsPerPage\n    const indexOfFirstPost = indexOfLastPost - postsPerPage\n    setCurrentPosts(posts.slice(indexOfFirstPost, indexOfLastPost))\n  }, [currentPage, posts, postsPerPage, setCurrentPosts])\n\n  useEffect(() => {\n    setCurrentPage(1)\n  }, [posts])\n\n  return (\n    <div className=\"pagination\">\n      {Array.from({ length: totalPages }, (_, i) => (\n        <button\n          key={i + 1}\n          onClick={() => setCurrentPage(i + 1)}\n          disabled={currentPage === i + 1}\n          className=\"pagination-button\"\n        >\n          {i + 1}\n        </button>\n      ))}\n    </div>\n  )\n}\n\nArticlePagination.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        excerpt: PropTypes.string,\n        fields: PropTypes.shape({\n          slug: PropTypes.string,\n        }),\n        frontmatter: PropTypes.shape({\n          date: PropTypes.string,\n          title: PropTypes.string,\n          category: PropTypes.arrayOf(PropTypes.string),\n          description: PropTypes.string,\n        }),\n      }),\n    })\n  ).isRequired,\n  postsPerPage: PropTypes.number.isRequired,\n  setCurrentPosts: PropTypes.func.isRequired,\n}\n\nexport default ArticlePagination","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport ArticlePagination from './articlePagination' // ArticlePagination 컴포넌트 임포트\n\nconst ArticleList = ({ posts }) => {\n  const [currentPosts, setCurrentPosts] = useState([])\n  const postsPerPage = 10\n\n  useEffect(() => {\n    setCurrentPosts(posts.slice(0, postsPerPage))\n  }, [posts, postsPerPage])\n\n  return (\n    <>\n      <div style={{\n        minHeight: '100vh',\n      }}>\n        <ol style={{ \n          listStyle: `none`,\n          margin: 0, \n          padding: 0,\n          width: '100%',\n          boxSizing: 'border-box'\n        }}>\n          {currentPosts.map(({ node }) => {\n            const title = node.frontmatter.title || node.fields.slug\n            const postCategory = node.frontmatter.category || []\n\n            return (\n              <li key={node.fields.slug} style={{ \n                height: 'auto', \n                minHeight: '110px',\n                marginBottom: '1.5rem',\n                position: 'relative'\n              }}>\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                  style={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    height: '100%',\n                    border: '1px solid #eee',\n                    borderRadius: '8px',\n                    padding: '1rem',\n                    transition: 'transform 0.2s ease-in-out',\n                  }}\n                >\n                  <header>\n                    <small>{postCategory.join(', ')}</small>\n                    <h2>\n                      <Link to={node.fields.slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">{title}</span>\n                      </Link>\n                    </h2>\n                    <small>{node.frontmatter.date}</small>\n                  </header>\n                  <section>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: node.frontmatter.description || node.excerpt,\n                      }}\n                      itemProp=\"description\"\n                    />\n                  </section>\n                </article>\n              </li>\n            )\n          })}\n        </ol>\n      </div>\n      <ArticlePagination\n        posts={posts}\n        postsPerPage={postsPerPage}\n        setCurrentPosts={setCurrentPosts}\n      />\n    </>\n  )\n}\n\nArticleList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      node: PropTypes.shape({\n        excerpt: PropTypes.string,\n        fields: PropTypes.shape({\n          slug: PropTypes.string,\n        }),\n        frontmatter: PropTypes.shape({\n          date: PropTypes.string,\n          title: PropTypes.string,\n          category: PropTypes.arrayOf(PropTypes.string),\n          description: PropTypes.string,\n        }),\n      }),\n    })\n  ).isRequired,\n}\n\nexport default ArticleList","const scrollButtonStyle = {\n  height: '40px',\n  padding: '10px 20px',\n  fontSize: '16px',\n  backgroundColor: '#cccccc',\n  color: '#fff',\n  border: 'none',\n  borderRadius: '5px',\n  cursor: 'pointer',\n  textAlign: 'center',\n  textDecoration: 'none',\n};\n\nexport default scrollButtonStyle;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport defaultScrollButtonStyle from './scrollButtonStyle';\n\nconst ScrollToBottomButton = ({ style }) => {\n  const [showButton, setShowButton] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY < document.documentElement.scrollHeight - window.innerHeight - 300) {\n        setShowButton(true);\n      } else {\n        setShowButton(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  const scrollToBottom = () => {\n    window.scrollTo({ top: document.documentElement.scrollHeight, behavior: 'smooth' });\n  };\n\n  return (\n    showButton && (\n        <button onClick={scrollToBottom} style={style}>\n            ↓\n        </button>\n    )\n  );\n};\n\nScrollToBottomButton.propTypes = {\n  style: PropTypes.object,\n};\n\nScrollToBottomButton.defaultProps = {\n  style: defaultScrollButtonStyle,\n};\n\nexport default ScrollToBottomButton;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport defaultScrollButtonStyle from './scrollButtonStyle';\n\n\nconst ScrollToTopButton = ({style}) => {\n  const [showButton, setShowButton] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY > 300) {\n        setShowButton(true);\n      } else {\n        setShowButton(false);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  return (\n    showButton && (\n        <button onClick={scrollToTop} style={style}>\n            ↑\n        </button>\n    )\n  );\n};\n\nScrollToTopButton.propTypes = {\n  style: PropTypes.object,\n};\n\nScrollToTopButton.defaultProps = {\n  style: defaultScrollButtonStyle,\n};\n\nexport default ScrollToTopButton;\n","import React from 'react';\nimport scrollButtonStyle from './scrollButtonStyle';\nimport ScrollToTopButton from './scrollToTopButton';\nimport ScrollToBottomButton from './scrollToBottomButton';\n\n\nconst UpdownScrollButtonContainer = () => {\n  return (\n    <div style={scrollButtonsContainerStyle}>\n      <ScrollToTopButton style={scrollButtonStyle} />\n      <ScrollToBottomButton style={scrollButtonStyle} />\n    </div>\n  );\n};\n\nconst scrollButtonsContainerStyle = {\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'center',\n  position: 'fixed',\n  bottom: '20px',\n  right: '20px',\n};\n\nexport default UpdownScrollButtonContainer;\n","import React, { useState } from 'react';\nimport { Link, graphql, useStaticQuery } from 'gatsby';\nimport './sidebar.css';\n\nconst Sidebar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark {\n        group(field: { frontmatter: { category: SELECT } }) {\n          fieldValue\n        }\n      }\n    }\n  `);\n\n  const categories = data.allMarkdownRemark.group.map(group => group.fieldValue);\n\n  const toggleMenu = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div className=\"hamburger-menu\">\n      <button onClick={toggleMenu} className={`hamburger-button ${isOpen ? 'shifted' : ''}`}>\n        {isOpen ? (\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n            <line x1=\"4\" y1=\"4\" x2=\"20\" y2=\"20\" stroke=\"white\" strokeWidth=\"2\" />\n            <line x1=\"20\" y1=\"4\" x2=\"4\" y2=\"20\" stroke=\"white\" strokeWidth=\"2\" />\n          </svg>\n        ) : (\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n            <line x1=\"4\" y1=\"12\" x2=\"20\" y2=\"12\" stroke=\"white\" strokeWidth=\"2\" />\n            <line x1=\"4\" y1=\"6\" x2=\"20\" y2=\"6\" stroke=\"white\" strokeWidth=\"2\" />\n            <line x1=\"4\" y1=\"18\" x2=\"20\" y2=\"18\" stroke=\"white\" strokeWidth=\"2\" />\n          </svg>\n        )}\n      </button>\n      <nav className={`sidebar ${isOpen ? 'open' : ''}`}>\n        <ul>\n          <Link to={`/`}>전체 리스트</Link>\n          {categories.map(category => (\n            <li key={category}>\n              <Link to={`/categories/${category}/`}>{category}</Link>\n            </li>\n          ))}\n        </ul>\n      </nav>\n      <div className={`content ${isOpen ? 'shifted' : ''}`}>\n        {/* 여기에 페이지 내용을 추가합니다 */}\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;","import * as React from \"react\"\nimport { Link, useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\nimport \"./bio.css\" // bio.css 파일 임포트\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            instagram\n            github\n            linkedin\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n  const {instagram, github, linkedin} = social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"https://avatars.githubusercontent.com/u/37289223?v=4\"\n        width={75}\n        height={75}\n        quality={75}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          <strong><Link to=\"/\">{author.name}</Link></strong>\n          <br />\n          {author?.summary || null}\n          <br />\n          <a href={`https://github.com/${github}`}>\n            <img src=\"https://img.shields.io/badge/github-181717?style=for-the-badge&logo=github&logoColor=white\" alt=\"GitHub badge\" />\n          </a>\n          {` `}\n          <a href={`https://www.linkedin.com/${linkedin}`}>\n            <img src=\"https://img.shields.io/badge/linkedin-007CC3?style=for-the-badge&logo=linkedin&logoColor=white\" alt=\"LinkedIn badge\" />\n          </a>\n          {` `}\n          <a href={`https://www.instagram.com/${instagram}`}>\n            <img src=\"https://img.shields.io/badge/instagram-FF0069?style=for-the-badge&logo=instagram&logoColor=white\" alt=\"Instagram badge\" />\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport Sidebar from \"../navi/sidebar\"\nimport Bio from \"../bio/bio\"\nimport \"./layout.css\" \n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location ? location.pathname === rootPath : false\n  let header\n\n  header = (\n    <h1 className=\"main-heading\">\n      <Link to=\"/\">{title}</Link>\n    </h1>\n  )\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <Sidebar/>\n      <header className=\"global-header\">\n        <div className=\"header-container\">\n          {header}\n        </div>\n      </header>\n      <main>{children}</main>\n      <footer>\n        <Bio />\n      </footer>\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string,\n  }),\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout","import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport \"./search.css\"; // search.css 파일 임포트\n\nconst Search = ({ onSearch, category }) => {\n  const data = useStaticQuery(graphql`\n    query SearchQuery {\n      allMarkdownRemark(\n        sort: { frontmatter: { date: DESC } }\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              date(formatString: \"MMMM DD, YYYY\")\n              category\n              description\n            }\n            fields {\n              slug\n            }\n            excerpt(pruneLength: 160)\n          }\n        }\n      }\n    }\n  `);\n\n  const [query, setQuery] = useState(\"\");\n  const posts = data.allMarkdownRemark.edges;\n\n  const handleSearch = () => {\n    const filteredPosts = posts.filter(({ node }) => {\n      const matchesTitle = node.frontmatter.title.toLowerCase().includes(query.toLowerCase());\n      const matchesCategory = category ? node.frontmatter.category.includes(category) : true;\n      return matchesTitle && matchesCategory;\n    });\n    onSearch(filteredPosts);\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      handleSearch();\n    }\n  };\n\n  return (\n    <div className=\"search-container\">\n      <input\n        type=\"text\"\n        placeholder=\"검색어를 입력하세요...\"\n        value={query}\n        onChange={e => setQuery(e.target.value)}\n        onKeyDown={handleKeyPress} // 엔터 키 이벤트 핸들러 추가\n      />\n      <button onClick={handleSearch}>검색</button>\n    </div>\n  );\n};\n\nSearch.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n  category: PropTypes.string,\n};\n\nexport default Search;","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ title, description, image, lang = \"kr\", meta = [], children, location }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaTitle = title || `The Engineer, Aiming Fine.`\n  const metaDescription = description || site.siteMetadata.description\n  const metaImage = image || `https://avatars.githubusercontent.com/u/37289223?v=4`\n  const canonical = `${site.siteMetadata.siteUrl}${location ? location.pathname : \"\"}`\n\n  // 구조화된 데이터 설정\n  const schemaOrgWebPage = {\n    \"@context\": \"http://schema.org\",\n    \"@type\": \"WebPage\",\n    url: canonical,\n    headline: metaTitle,\n    inLanguage: lang,\n    mainEntityOfPage: canonical,\n    description: metaDescription,\n    name: metaTitle,\n    author: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"Lshh\",\n    },\n    copyrightHolder: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"Lshh\",\n    },\n    copyrightYear: new Date().getFullYear(),\n    creator: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"Lshh\",\n    },\n    publisher: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"Lshh\",\n    },\n    image: {\n      \"@type\": \"ImageObject\",\n      url: metaImage,\n    },\n    datePublished: new Date().toISOString(),\n  }\n\n  // 블로그 포스트에 대한 구조화된 데이터\n  const schemaArticle = {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BlogPosting\",\n    url: canonical,\n    name: metaTitle,\n    headline: metaTitle,\n    image: {\n      \"@type\": \"ImageObject\",\n      url: metaImage,\n    },\n    description: metaDescription,\n    author: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"lshh\",\n    },\n    publisher: {\n      \"@type\": \"Person\",\n      name: site.siteMetadata.author?.name || \"lshh\",\n      logo: {\n        \"@type\": \"ImageObject\",\n        url: metaImage,\n      },\n    },\n    mainEntityOfPage: canonical,\n    datePublished: new Date().toISOString(),\n  }\n\n  return (\n    <Helmet\n      htmlAttributes={{ lang }}\n      title={metaTitle}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      link={[\n        {\n          rel: \"canonical\",\n          href: `${site.siteMetadata.siteUrl}${location ? location.pathname : \"\"}`\n        }\n      ]}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: `robots`,\n          content: `index, follow`\n        },\n        {\n          property: `og:title`,\n          content: metaTitle,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          property: `og:url`,\n          content: canonical,\n        },\n        {\n          property: `og:image`,\n          content: metaImage,\n        },\n        {\n          property: `og:image:alt`,\n          content: metaTitle,\n        },\n        {\n          property: `og:site_name`,\n          content: site.siteMetadata.title,\n        },\n      ].concat(meta)}\n    >\n      {children}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgWebPage)}\n      </script>\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaArticle)}\n      </script>\n    </Helmet>\n  )\n}\nSEO.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  children: PropTypes.node,\n  location: PropTypes.object,\n}\n\nexport default SEO\n","import React, { useState } from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout/layout\"\nimport Seo from \"../components/seo\"\nimport ScrollButtonContainer from \"../components/button/scroll/updownScrollButtonContainer\"\nimport ArticleList from \"../components/article/articleList\"\nimport Search from \"../components/search/search\"\nimport PropTypes from \"prop-types\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `The Engineer, Aiming Fine.`\n  const posts = data.allMarkdownRemark.edges\n  const [filteredPosts, setFilteredPosts] = useState(posts)\n\n  const handleSearch = (filtered) => {\n    setFilteredPosts(filtered)\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n        <Search onSearch={handleSearch} />\n      </div>\n      <ArticleList posts={filteredPosts} />\n      <ScrollButtonContainer />\n    </Layout>\n  )\n}\n\nBlogIndex.propTypes = {\n  data: PropTypes.shape({\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string,\n      }),\n    }),\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            excerpt: PropTypes.string,\n            fields: PropTypes.shape({\n              slug: PropTypes.string,\n            }),\n            frontmatter: PropTypes.shape({\n              date: PropTypes.string,\n              title: PropTypes.string,\n              category: PropTypes.arrayOf(PropTypes.string),\n              description: PropTypes.string,\n            }),\n          }),\n        })\n      ),\n    }),\n  }).isRequired,\n  location: PropTypes.object.isRequired,\n}\n\nexport default BlogIndex\n\nexport const Head = ({ location }) => (\n  <Seo \n    title=\"All posts\" \n    description=\"The Engineer, Aiming Fine - 개발과 엔지니어링에 관한 Iol-lshh의 블로그입니다.\"\n    location={location} \n  />\n)\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            category\n            description\n          }\n        }\n      }\n    }\n  }\n`"],"names":["posts","postsPerPage","setCurrentPosts","currentPage","setCurrentPage","useState","totalPages","Math","ceil","length","useEffect","indexOfLastPost","indexOfFirstPost","slice","className","Array","from","_","i","key","onClick","disabled","currentPosts","style","minHeight","listStyle","margin","padding","width","boxSizing","map","node","title","frontmatter","fields","slug","postCategory","category","height","marginBottom","position","itemScope","itemType","display","flexDirection","border","borderRadius","transition","join","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","fontSize","backgroundColor","color","cursor","textAlign","textDecoration","ScrollToBottomButton","showButton","setShowButton","handleScroll","window","scrollY","document","documentElement","scrollHeight","innerHeight","addEventListener","removeEventListener","scrollTo","top","behavior","defaultProps","defaultScrollButtonStyle","ScrollToTopButton","scrollButtonsContainerStyle","alignItems","bottom","right","scrollButtonStyle","isOpen","setIsOpen","categories","useStaticQuery","allMarkdownRemark","group","fieldValue","viewBox","x1","y1","x2","y2","stroke","strokeWidth","data","author","site","siteMetadata","social","instagram","github","linkedin","S","layout","formats","src","quality","alt","name","summary","href","location","children","isRootPath","pathname","header","onSearch","query","setQuery","edges","handleSearch","filteredPosts","filter","matchesTitle","toLowerCase","includes","matchesCategory","type","placeholder","value","onChange","e","target","onKeyDown","event","image","lang","meta","metaTitle","metaDescription","metaImage","canonical","siteUrl","schemaOrgWebPage","url","headline","inLanguage","mainEntityOfPage","copyrightHolder","copyrightYear","Date","getFullYear","creator","publisher","datePublished","toISOString","schemaArticle","logo","htmlAttributes","titleTemplate","link","rel","content","property","concat","JSON","stringify","siteTitle","setFilteredPosts","justifyContent","filtered","Head"],"sourceRoot":""}